d9e4dd5826ce6b1327f3a1e50b2edb7f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("react-native");

var _react = _interopRequireDefault(require("react"));

var _DashboardScreen = _interopRequireDefault(require("../app/screens/Dashboard/DashboardScreen"));

var _reactRedux = require("react-redux");

var _reactNative2 = require("@testing-library/react-native");

var _configureStore2 = _interopRequireDefault(require("../app/store/configureStore"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

jest.useFakeTimers();
describe("Dashboard Screen ", function () {
  var _configureStore = (0, _configureStore2.default)(),
      store = _configureStore.store;

  var component = _react.default.createElement(_reactRedux.Provider, {
    store: store
  }, _react.default.createElement(_DashboardScreen.default, null));

  (0, _reactNative2.render)(component);
  var dashboardState = store.getState();
  test("Snapshot ", function () {
    expect(component).toMatchSnapshot();
  });
  it("Render without any crash", function () {
    expect(component).toBeTruthy();
  });
  it("return correct number of state", function () {
    expect(dashboardState).toEqual(expect.arrayContaining([expect.objectContaining({
      catId: 1,
      selectedItem: 1,
      movieData: "",
      isWatchlistItem: false
    })]));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqZXN0IiwidXNlRmFrZVRpbWVycyIsImRlc2NyaWJlIiwiY29uZmlndXJlU3RvcmUiLCJzdG9yZSIsImNvbXBvbmVudCIsInJlbmRlciIsImRhc2hib2FyZFN0YXRlIiwiZ2V0U3RhdGUiLCJ0ZXN0IiwiZXhwZWN0IiwidG9NYXRjaFNuYXBzaG90IiwiaXQiLCJ0b0JlVHJ1dGh5IiwidG9FcXVhbCIsImFycmF5Q29udGFpbmluZyIsIm9iamVjdENvbnRhaW5pbmciLCJjYXRJZCIsInNlbGVjdGVkSXRlbSIsIm1vdmllRGF0YSIsImlzV2F0Y2hsaXN0SXRlbSJdLCJzb3VyY2VzIjpbIkRhc2hib2FyZFNjcmVlbi10ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCBcInJlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IERhc2hib2FyZFNjcmVlbiBmcm9tIFwiLi4vYXBwL3NjcmVlbnMvRGFzaGJvYXJkL0Rhc2hib2FyZFNjcmVlblwiO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnQgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmVcIjtcbmltcG9ydCBjb25maWd1cmVTdG9yZSBmcm9tIFwiLi4vYXBwL3N0b3JlL2NvbmZpZ3VyZVN0b3JlXCI7XG5cbi8vIE5vdGU6IHRlc3QgcmVuZGVyZXIgbXVzdCBiZSByZXF1aXJlZCBhZnRlciByZWFjdC1uYXRpdmUuXG5pbXBvcnQgcmVuZGVyZXIgZnJvbSBcInJlYWN0LXRlc3QtcmVuZGVyZXJcIjtcbmplc3QudXNlRmFrZVRpbWVycygpO1xuXG5kZXNjcmliZShcIkRhc2hib2FyZCBTY3JlZW4gXCIsICgpID0+IHtcbiAgY29uc3QgeyBzdG9yZSB9ID0gY29uZmlndXJlU3RvcmUoKTtcbiAgY29uc3QgY29tcG9uZW50ID0gKFxuICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgPERhc2hib2FyZFNjcmVlbiAvPlxuICAgIDwvUHJvdmlkZXI+XG4gICk7XG4gIHJlbmRlcihjb21wb25lbnQpO1xuICBjb25zdCBkYXNoYm9hcmRTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIHRlc3QoXCJTbmFwc2hvdCBcIiwgKCkgPT4ge1xuICAgIGV4cGVjdChjb21wb25lbnQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICB9KTtcbiAgaXQoXCJSZW5kZXIgd2l0aG91dCBhbnkgY3Jhc2hcIiwgKCkgPT4ge1xuICAgIGV4cGVjdChjb21wb25lbnQpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG4gIGl0KFwicmV0dXJuIGNvcnJlY3QgbnVtYmVyIG9mIHN0YXRlXCIsICgpID0+IHtcbiAgICAvLyBleHBlY3QoZGFzaGJvYXJkU3RhdGUpLnRvRXF1YWwoNCk7XG4gICAgZXhwZWN0KGRhc2hib2FyZFN0YXRlKS50b0VxdWFsKFxuICAgICAgZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICBjYXRJZDogMSxcbiAgICAgICAgICBzZWxlY3RlZEl0ZW06IDEsXG4gICAgICAgICAgbW92aWVEYXRhOiBcIlwiLFxuICAgICAgICAgIGlzV2F0Y2hsaXN0SXRlbTogZmFsc2UsXG4gICAgICAgIH0pLFxuICAgICAgXSlcbiAgICApO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUlBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBOztBQUNBQSxJQUFJLENBQUNDLGFBQUw7QUFFQUMsUUFBUSxDQUFDLG1CQUFELEVBQXNCLFlBQU07RUFDbEMsc0JBQWtCLElBQUFDLHdCQUFBLEdBQWxCO0VBQUEsSUFBUUMsS0FBUixtQkFBUUEsS0FBUjs7RUFDQSxJQUFNQyxTQUFTLEdBQ2IsNkJBQUMsb0JBQUQ7SUFBVSxLQUFLLEVBQUVEO0VBQWpCLEdBQ0UsNkJBQUMsd0JBQUQsT0FERixDQURGOztFQUtBLElBQUFFLG9CQUFBLEVBQU9ELFNBQVA7RUFDQSxJQUFNRSxjQUFjLEdBQUdILEtBQUssQ0FBQ0ksUUFBTixFQUF2QjtFQUNBQyxJQUFJLENBQUMsV0FBRCxFQUFjLFlBQU07SUFDdEJDLE1BQU0sQ0FBQ0wsU0FBRCxDQUFOLENBQWtCTSxlQUFsQjtFQUNELENBRkcsQ0FBSjtFQUdBQyxFQUFFLENBQUMsMEJBQUQsRUFBNkIsWUFBTTtJQUNuQ0YsTUFBTSxDQUFDTCxTQUFELENBQU4sQ0FBa0JRLFVBQWxCO0VBQ0QsQ0FGQyxDQUFGO0VBR0FELEVBQUUsQ0FBQyxnQ0FBRCxFQUFtQyxZQUFNO0lBRXpDRixNQUFNLENBQUNILGNBQUQsQ0FBTixDQUF1Qk8sT0FBdkIsQ0FDRUosTUFBTSxDQUFDSyxlQUFQLENBQXVCLENBQ3JCTCxNQUFNLENBQUNNLGdCQUFQLENBQXdCO01BQ3RCQyxLQUFLLEVBQUUsQ0FEZTtNQUV0QkMsWUFBWSxFQUFFLENBRlE7TUFHdEJDLFNBQVMsRUFBRSxFQUhXO01BSXRCQyxlQUFlLEVBQUU7SUFKSyxDQUF4QixDQURxQixDQUF2QixDQURGO0VBVUQsQ0FaQyxDQUFGO0FBYUQsQ0E1Qk8sQ0FBUiJ9