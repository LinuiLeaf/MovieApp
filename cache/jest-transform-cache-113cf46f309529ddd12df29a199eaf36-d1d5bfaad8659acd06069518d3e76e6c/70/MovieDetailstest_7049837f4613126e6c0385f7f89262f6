4bebfd7ddb16e72302dc6042da740751
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _reactNative = require("react-native");

var _react = _interopRequireDefault(require("react"));

var _MovieDetails = _interopRequireDefault(require("../app/screens/MovieDetails/MovieDetails"));

var _constants = _interopRequireDefault(require("../app/config/constants"));

var _enzyme = require("enzyme");

var _reactRedux = require("react-redux");

var _configureStore = _interopRequireDefault(require("../app/store/configureStore"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _reactNative2 = require("@testing-library/react-native");

var _jestNative = require("@testing-library/jest-native");

require("@testing-library/jest-native/extend-expect");

var findTextElement = function findTextElement(tree, element) {
  return true;
};

describe("Movie Details Screen ", function () {
  var wrapper = _reactTestRenderer.default.create(_react.default.createElement(_MovieDetails.default, null)).toJSON();

  test("Snapshot ", function () {
    expect(wrapper).toMatchSnapshot();
  });
  it("Image must contain an src", function _callee() {
    var _await$render, getByAltText, image;

    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator.default.awrap((0, _reactNative2.render)(_react.default.createElement(_MovieDetails.default, null)));

          case 2:
            _await$render = _context.sent;
            getByAltText = _await$render.getByAltText;
            image = _reactNative2.screen.getByTestId("poster");
            expect(image.props.source.uri).toContain("uri");

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  });
  test("Images", function () {
    expect(findTextElement(wrapper, "Images")).toBeDefined();
  });
  test("Flatlist", function () {
    expect(findTextElement(wrapper, "FlatList")).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmaW5kVGV4dEVsZW1lbnQiLCJ0cmVlIiwiZWxlbWVudCIsImRlc2NyaWJlIiwid3JhcHBlciIsInJlbmRlcmVyIiwiY3JlYXRlIiwidG9KU09OIiwidGVzdCIsImV4cGVjdCIsInRvTWF0Y2hTbmFwc2hvdCIsIml0IiwicmVuZGVyIiwiZ2V0QnlBbHRUZXh0IiwiaW1hZ2UiLCJzY3JlZW4iLCJnZXRCeVRlc3RJZCIsInByb3BzIiwic291cmNlIiwidXJpIiwidG9Db250YWluIiwidG9CZURlZmluZWQiXSwic291cmNlcyI6WyJNb3ZpZURldGFpbHMtdGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgXCJyZWFjdC1uYXRpdmVcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBNb3ZpZURldGFpbHMgZnJvbSBcIi4uL2FwcC9zY3JlZW5zL01vdmllRGV0YWlscy9Nb3ZpZURldGFpbHNcIjtcbmltcG9ydCBjb25zdGFudHMgZnJvbSBcIi4uL2FwcC9jb25maWcvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcbmltcG9ydCB7IHNoYWxsb3csIGNvbmZpZ3VyZSwgbW91bnQgfSBmcm9tIFwiZW56eW1lXCI7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHN0b3JlIGZyb20gXCIuLi9hcHAvc3RvcmUvY29uZmlndXJlU3RvcmVcIjtcbi8vIE5vdGU6IHRlc3QgcmVuZGVyZXIgbXVzdCBiZSByZXF1aXJlZCBhZnRlciByZWFjdC1uYXRpdmUuXG5pbXBvcnQgcmVuZGVyZXIgZnJvbSBcInJlYWN0LXRlc3QtcmVuZGVyZXJcIjtcbmltcG9ydCB7IHJlbmRlciwgY29udGFpbmVyLCBzY3JlZW4gfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmVcIjtcbmltcG9ydCB7IHRvSGF2ZVN0eWxlIH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvamVzdC1uYXRpdmVcIjtcbmltcG9ydCBcIkB0ZXN0aW5nLWxpYnJhcnkvamVzdC1uYXRpdmUvZXh0ZW5kLWV4cGVjdFwiO1xuXG5sZXQgZmluZFRleHRFbGVtZW50ID0gZnVuY3Rpb24gKHRyZWUsIGVsZW1lbnQpIHtcbiAgLy8gY29uc29sZS53YXJuKHRyZWUuY2hpbGRyZW4pO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmRlc2NyaWJlKFwiTW92aWUgRGV0YWlscyBTY3JlZW4gXCIsICgpID0+IHtcbiAgY29uc3Qgd3JhcHBlciA9IHJlbmRlcmVyLmNyZWF0ZSg8TW92aWVEZXRhaWxzIC8+KS50b0pTT04oKTtcblxuICB0ZXN0KFwiU25hcHNob3QgXCIsICgpID0+IHtcbiAgICBleHBlY3Qod3JhcHBlcikudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xuICBpdChcIkltYWdlIG11c3QgY29udGFpbiBhbiBzcmNcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlBbHRUZXh0IH0gPSBhd2FpdCByZW5kZXIoPE1vdmllRGV0YWlscyAvPik7XG5cbiAgICBjb25zdCBpbWFnZSA9IHNjcmVlbi5nZXRCeVRlc3RJZChcInBvc3RlclwiKTtcbiAgICAvLyBleHBlY3QoaW1hZ2Uuc291cmNlKS50b0NvbnRhaW4oXCJ1cmlcIik7XG4gICAgZXhwZWN0KGltYWdlLnByb3BzLnNvdXJjZS51cmkpLnRvQ29udGFpbihcInVyaVwiKTtcbiAgfSk7XG4gIHRlc3QoXCJJbWFnZXNcIiwgKCkgPT4ge1xuICAgIGV4cGVjdChmaW5kVGV4dEVsZW1lbnQod3JhcHBlciwgXCJJbWFnZXNcIikpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuICB0ZXN0KFwiRmxhdGxpc3RcIiwgKCkgPT4ge1xuICAgIGV4cGVjdChmaW5kVGV4dEVsZW1lbnQod3JhcHBlciwgXCJGbGF0TGlzdFwiKSkudG9CZURlZmluZWQoKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUlBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLElBQUlBLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBVUMsSUFBVixFQUFnQkMsT0FBaEIsRUFBeUI7RUFFN0MsT0FBTyxJQUFQO0FBQ0QsQ0FIRDs7QUFLQUMsUUFBUSxDQUFDLHVCQUFELEVBQTBCLFlBQU07RUFDdEMsSUFBTUMsT0FBTyxHQUFHQywwQkFBQSxDQUFTQyxNQUFULENBQWdCLDZCQUFDLHFCQUFELE9BQWhCLEVBQWtDQyxNQUFsQyxFQUFoQjs7RUFFQUMsSUFBSSxDQUFDLFdBQUQsRUFBYyxZQUFNO0lBQ3RCQyxNQUFNLENBQUNMLE9BQUQsQ0FBTixDQUFnQk0sZUFBaEI7RUFDRCxDQUZHLENBQUo7RUFHQUMsRUFBRSxDQUFDLDJCQUFELEVBQThCO0lBQUE7O0lBQUE7TUFBQTtRQUFBO1VBQUE7WUFBQTtZQUFBLGtDQUNDLElBQUFDLG9CQUFBLEVBQU8sNkJBQUMscUJBQUQsT0FBUCxDQUREOztVQUFBO1lBQUE7WUFDdEJDLFlBRHNCLGlCQUN0QkEsWUFEc0I7WUFHeEJDLEtBSHdCLEdBR2hCQyxvQkFBQSxDQUFPQyxXQUFQLENBQW1CLFFBQW5CLENBSGdCO1lBSzlCUCxNQUFNLENBQUNLLEtBQUssQ0FBQ0csS0FBTixDQUFZQyxNQUFaLENBQW1CQyxHQUFwQixDQUFOLENBQStCQyxTQUEvQixDQUF5QyxLQUF6Qzs7VUFMOEI7VUFBQTtZQUFBO1FBQUE7TUFBQTtJQUFBO0VBQUEsQ0FBOUIsQ0FBRjtFQU9BWixJQUFJLENBQUMsUUFBRCxFQUFXLFlBQU07SUFDbkJDLE1BQU0sQ0FBQ1QsZUFBZSxDQUFDSSxPQUFELEVBQVUsUUFBVixDQUFoQixDQUFOLENBQTJDaUIsV0FBM0M7RUFDRCxDQUZHLENBQUo7RUFHQWIsSUFBSSxDQUFDLFVBQUQsRUFBYSxZQUFNO0lBQ3JCQyxNQUFNLENBQUNULGVBQWUsQ0FBQ0ksT0FBRCxFQUFVLFVBQVYsQ0FBaEIsQ0FBTixDQUE2Q2lCLFdBQTdDO0VBQ0QsQ0FGRyxDQUFKO0FBR0QsQ0FuQk8sQ0FBUiJ9