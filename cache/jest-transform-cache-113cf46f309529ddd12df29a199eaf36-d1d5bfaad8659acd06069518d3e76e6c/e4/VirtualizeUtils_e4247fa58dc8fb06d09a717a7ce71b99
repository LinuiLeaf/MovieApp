b9db0f048d3d33062221a4508b13177e
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeWindowedRenderLimits = computeWindowedRenderLimits;
exports.elementsThatOverlapOffsets = elementsThatOverlapOffsets;
exports.keyExtractor = keyExtractor;
exports.newRangeCount = newRangeCount;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _invariant = _interopRequireDefault(require("invariant"));

function elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {
  var out = [];
  var outLength = 0;

  for (var ii = 0; ii < itemCount; ii++) {
    var frame = getFrameMetrics(ii);
    var trailingOffset = frame.offset + frame.length;

    for (var kk = 0; kk < offsets.length; kk++) {
      if (out[kk] == null && trailingOffset >= offsets[kk]) {
        out[kk] = ii;
        outLength++;

        if (kk === offsets.length - 1) {
          (0, _invariant.default)(outLength === offsets.length, 'bad offsets input, should be in increasing order: %s', JSON.stringify(offsets));
          return out;
        }
      }
    }
  }

  return out;
}

function newRangeCount(prev, next) {
  return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));
}

function computeWindowedRenderLimits(data, getItemCount, maxToRenderPerBatch, windowSize, prev, getFrameMetricsApprox, scrollMetrics) {
  var itemCount = getItemCount(data);

  if (itemCount === 0) {
    return prev;
  }

  var offset = scrollMetrics.offset,
      velocity = scrollMetrics.velocity,
      visibleLength = scrollMetrics.visibleLength;
  var visibleBegin = Math.max(0, offset);
  var visibleEnd = visibleBegin + visibleLength;
  var overscanLength = (windowSize - 1) * visibleLength;
  var leadFactor = 0.5;
  var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';
  var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);
  var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);
  var lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;

  if (lastItemOffset < overscanBegin) {
    return {
      first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),
      last: itemCount - 1
    };
  }

  var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], itemCount, getFrameMetricsApprox),
      _elementsThatOverlapO2 = (0, _slicedToArray2.default)(_elementsThatOverlapO, 4),
      overscanFirst = _elementsThatOverlapO2[0],
      first = _elementsThatOverlapO2[1],
      last = _elementsThatOverlapO2[2],
      overscanLast = _elementsThatOverlapO2[3];

  overscanFirst = overscanFirst == null ? 0 : overscanFirst;
  first = first == null ? Math.max(0, overscanFirst) : first;
  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
  last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;
  var visible = {
    first: first,
    last: last
  };
  var newCellCount = newRangeCount(prev, visible);

  while (true) {
    if (first <= overscanFirst && last >= overscanLast) {
      break;
    }

    var maxNewCells = newCellCount >= maxToRenderPerBatch;
    var firstWillAddMore = first <= prev.first || first > prev.last;
    var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);
    var lastWillAddMore = last >= prev.last || last < prev.first;
    var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);

    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
      break;
    }

    if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {
      if (firstWillAddMore) {
        newCellCount++;
      }

      first--;
    }

    if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {
      if (lastWillAddMore) {
        newCellCount++;
      }

      last++;
    }
  }

  if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {
    throw new Error('Bad window calculation ' + JSON.stringify({
      first: first,
      last: last,
      itemCount: itemCount,
      overscanFirst: overscanFirst,
      overscanLast: overscanLast,
      visible: visible
    }));
  }

  return {
    first: first,
    last: last
  };
}

function keyExtractor(item, index) {
  if (typeof item === 'object' && (item == null ? void 0 : item.key) != null) {
    return item.key;
  }

  if (typeof item === 'object' && (item == null ? void 0 : item.id) != null) {
    return item.id;
  }

  return String(index);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJlbGVtZW50c1RoYXRPdmVybGFwT2Zmc2V0cyIsIm9mZnNldHMiLCJpdGVtQ291bnQiLCJnZXRGcmFtZU1ldHJpY3MiLCJvdXQiLCJvdXRMZW5ndGgiLCJpaSIsImZyYW1lIiwidHJhaWxpbmdPZmZzZXQiLCJvZmZzZXQiLCJsZW5ndGgiLCJrayIsImludmFyaWFudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJuZXdSYW5nZUNvdW50IiwicHJldiIsIm5leHQiLCJsYXN0IiwiZmlyc3QiLCJNYXRoIiwibWF4IiwibWluIiwiY29tcHV0ZVdpbmRvd2VkUmVuZGVyTGltaXRzIiwiZGF0YSIsImdldEl0ZW1Db3VudCIsIm1heFRvUmVuZGVyUGVyQmF0Y2giLCJ3aW5kb3dTaXplIiwiZ2V0RnJhbWVNZXRyaWNzQXBwcm94Iiwic2Nyb2xsTWV0cmljcyIsInZlbG9jaXR5IiwidmlzaWJsZUxlbmd0aCIsInZpc2libGVCZWdpbiIsInZpc2libGVFbmQiLCJvdmVyc2Nhbkxlbmd0aCIsImxlYWRGYWN0b3IiLCJmaWxsUHJlZmVyZW5jZSIsIm92ZXJzY2FuQmVnaW4iLCJvdmVyc2NhbkVuZCIsImxhc3RJdGVtT2Zmc2V0Iiwib3ZlcnNjYW5GaXJzdCIsIm92ZXJzY2FuTGFzdCIsInZpc2libGUiLCJuZXdDZWxsQ291bnQiLCJtYXhOZXdDZWxscyIsImZpcnN0V2lsbEFkZE1vcmUiLCJmaXJzdFNob3VsZEluY3JlbWVudCIsImxhc3RXaWxsQWRkTW9yZSIsImxhc3RTaG91bGRJbmNyZW1lbnQiLCJFcnJvciIsImtleUV4dHJhY3RvciIsIml0ZW0iLCJpbmRleCIsImtleSIsImlkIiwiU3RyaW5nIl0sInNvdXJjZXMiOlsiVmlydHVhbGl6ZVV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcblxuLyoqXG4gKiBVc2VkIHRvIGZpbmQgdGhlIGluZGljZXMgb2YgdGhlIGZyYW1lcyB0aGF0IG92ZXJsYXAgdGhlIGdpdmVuIG9mZnNldHMuIFVzZWZ1bCBmb3IgZmluZGluZyB0aGVcbiAqIGl0ZW1zIHRoYXQgYm91bmQgZGlmZmVyZW50IHdpbmRvd3Mgb2YgY29udGVudCwgc3VjaCBhcyB0aGUgdmlzaWJsZSBhcmVhIG9yIHRoZSBidWZmZXJlZCBvdmVyc2NhblxuICogYXJlYS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVsZW1lbnRzVGhhdE92ZXJsYXBPZmZzZXRzKFxuICBvZmZzZXRzOiBBcnJheTxudW1iZXI+LFxuICBpdGVtQ291bnQ6IG51bWJlcixcbiAgZ2V0RnJhbWVNZXRyaWNzOiAoXG4gICAgaW5kZXg6IG51bWJlcixcbiAgKSA9PiB7XG4gICAgbGVuZ3RoOiBudW1iZXIsXG4gICAgb2Zmc2V0OiBudW1iZXIsXG4gICAgLi4uXG4gIH0sXG4pOiBBcnJheTxudW1iZXI+IHtcbiAgY29uc3Qgb3V0ID0gW107XG4gIGxldCBvdXRMZW5ndGggPSAwO1xuICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgaXRlbUNvdW50OyBpaSsrKSB7XG4gICAgY29uc3QgZnJhbWUgPSBnZXRGcmFtZU1ldHJpY3MoaWkpO1xuICAgIGNvbnN0IHRyYWlsaW5nT2Zmc2V0ID0gZnJhbWUub2Zmc2V0ICsgZnJhbWUubGVuZ3RoO1xuICAgIGZvciAobGV0IGtrID0gMDsga2sgPCBvZmZzZXRzLmxlbmd0aDsga2srKykge1xuICAgICAgaWYgKG91dFtra10gPT0gbnVsbCAmJiB0cmFpbGluZ09mZnNldCA+PSBvZmZzZXRzW2trXSkge1xuICAgICAgICBvdXRba2tdID0gaWk7XG4gICAgICAgIG91dExlbmd0aCsrO1xuICAgICAgICBpZiAoa2sgPT09IG9mZnNldHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGludmFyaWFudChcbiAgICAgICAgICAgIG91dExlbmd0aCA9PT0gb2Zmc2V0cy5sZW5ndGgsXG4gICAgICAgICAgICAnYmFkIG9mZnNldHMgaW5wdXQsIHNob3VsZCBiZSBpbiBpbmNyZWFzaW5nIG9yZGVyOiAlcycsXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShvZmZzZXRzKSxcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBgbmV4dGAgcmFuZ2UgdGhhdCBhcmUgbmV3IGNvbXBhcmVkIHRvIHRoZSBgcHJldmAgcmFuZ2UuXG4gKiBIYW5keSBmb3IgY2FsY3VsYXRpbmcgaG93IG1hbnkgbmV3IGl0ZW1zIHdpbGwgYmUgcmVuZGVyZWQgd2hlbiB0aGUgcmVuZGVyIHdpbmRvdyBjaGFuZ2VzIHNvIHdlXG4gKiBjYW4gcmVzdHJpY3QgdGhlIG51bWJlciBvZiBuZXcgaXRlbXMgcmVuZGVyIGF0IG9uY2Ugc28gdGhhdCBjb250ZW50IGNhbiBhcHBlYXIgb24gdGhlIHNjcmVlblxuICogZmFzdGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbmV3UmFuZ2VDb3VudChcbiAgcHJldjoge1xuICAgIGZpcnN0OiBudW1iZXIsXG4gICAgbGFzdDogbnVtYmVyLFxuICAgIC4uLlxuICB9LFxuICBuZXh0OiB7XG4gICAgZmlyc3Q6IG51bWJlcixcbiAgICBsYXN0OiBudW1iZXIsXG4gICAgLi4uXG4gIH0sXG4pOiBudW1iZXIge1xuICByZXR1cm4gKFxuICAgIG5leHQubGFzdCAtXG4gICAgbmV4dC5maXJzdCArXG4gICAgMSAtXG4gICAgTWF0aC5tYXgoXG4gICAgICAwLFxuICAgICAgMSArIE1hdGgubWluKG5leHQubGFzdCwgcHJldi5sYXN0KSAtIE1hdGgubWF4KG5leHQuZmlyc3QsIHByZXYuZmlyc3QpLFxuICAgIClcbiAgKTtcbn1cblxuLyoqXG4gKiBDdXN0b20gbG9naWMgZm9yIGRldGVybWluaW5nIHdoaWNoIGl0ZW1zIHNob3VsZCBiZSByZW5kZXJlZCBnaXZlbiB0aGUgY3VycmVudCBmcmFtZSBhbmQgc2Nyb2xsXG4gKiBtZXRyaWNzLCBhcyB3ZWxsIGFzIHRoZSBwcmV2aW91cyByZW5kZXIgc3RhdGUuIFRoZSBhbGdvcml0aG0gbWF5IGV2b2x2ZSBvdmVyIHRpbWUsIGJ1dCBnZW5lcmFsbHlcbiAqIHByaW9yaXRpemVzIHRoZSB2aXNpYmxlIGFyZWEgZmlyc3QsIHRoZW4gZXhwYW5kcyB0aGF0IHdpdGggb3ZlcnNjYW4gcmVnaW9ucyBhaGVhZCBhbmQgYmVoaW5kLFxuICogYmlhc2VkIGluIHRoZSBkaXJlY3Rpb24gb2Ygc2Nyb2xsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZVdpbmRvd2VkUmVuZGVyTGltaXRzKFxuICBkYXRhOiBhbnksXG4gIGdldEl0ZW1Db3VudDogKGRhdGE6IGFueSkgPT4gbnVtYmVyLFxuICBtYXhUb1JlbmRlclBlckJhdGNoOiBudW1iZXIsXG4gIHdpbmRvd1NpemU6IG51bWJlcixcbiAgcHJldjoge1xuICAgIGZpcnN0OiBudW1iZXIsXG4gICAgbGFzdDogbnVtYmVyLFxuICAgIC4uLlxuICB9LFxuICBnZXRGcmFtZU1ldHJpY3NBcHByb3g6IChcbiAgICBpbmRleDogbnVtYmVyLFxuICApID0+IHtcbiAgICBsZW5ndGg6IG51bWJlcixcbiAgICBvZmZzZXQ6IG51bWJlcixcbiAgICAuLi5cbiAgfSxcbiAgc2Nyb2xsTWV0cmljczoge1xuICAgIGR0OiBudW1iZXIsXG4gICAgb2Zmc2V0OiBudW1iZXIsXG4gICAgdmVsb2NpdHk6IG51bWJlcixcbiAgICB2aXNpYmxlTGVuZ3RoOiBudW1iZXIsXG4gICAgLi4uXG4gIH0sXG4pOiB7XG4gIGZpcnN0OiBudW1iZXIsXG4gIGxhc3Q6IG51bWJlcixcbiAgLi4uXG59IHtcbiAgY29uc3QgaXRlbUNvdW50ID0gZ2V0SXRlbUNvdW50KGRhdGEpO1xuICBpZiAoaXRlbUNvdW50ID09PSAwKSB7XG4gICAgcmV0dXJuIHByZXY7XG4gIH1cbiAgY29uc3Qge29mZnNldCwgdmVsb2NpdHksIHZpc2libGVMZW5ndGh9ID0gc2Nyb2xsTWV0cmljcztcblxuICAvLyBTdGFydCB3aXRoIHZpc2libGUgYXJlYSwgdGhlbiBjb21wdXRlIG1heGltdW0gb3ZlcnNjYW4gcmVnaW9uIGJ5IGV4cGFuZGluZyBmcm9tIHRoZXJlLCBiaWFzZWRcbiAgLy8gaW4gdGhlIGRpcmVjdGlvbiBvZiBzY3JvbGwuIFRvdGFsIG92ZXJzY2FuIGFyZWEgaXMgY2FwcGVkLCB3aGljaCBzaG91bGQgY2FwIG1lbW9yeSBjb25zdW1wdGlvblxuICAvLyB0b28uXG4gIGNvbnN0IHZpc2libGVCZWdpbiA9IE1hdGgubWF4KDAsIG9mZnNldCk7XG4gIGNvbnN0IHZpc2libGVFbmQgPSB2aXNpYmxlQmVnaW4gKyB2aXNpYmxlTGVuZ3RoO1xuICBjb25zdCBvdmVyc2Nhbkxlbmd0aCA9ICh3aW5kb3dTaXplIC0gMSkgKiB2aXNpYmxlTGVuZ3RoO1xuXG4gIC8vIENvbnNpZGVyaW5nIHZlbG9jaXR5IHNlZW1zIHRvIGludHJvZHVjZSBtb3JlIGNodXJuIHRoYW4gaXQncyB3b3J0aC5cbiAgY29uc3QgbGVhZEZhY3RvciA9IDAuNTsgLy8gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdmVsb2NpdHkgLyAyNSArIDAuNSkpO1xuXG4gIGNvbnN0IGZpbGxQcmVmZXJlbmNlID1cbiAgICB2ZWxvY2l0eSA+IDEgPyAnYWZ0ZXInIDogdmVsb2NpdHkgPCAtMSA/ICdiZWZvcmUnIDogJ25vbmUnO1xuXG4gIGNvbnN0IG92ZXJzY2FuQmVnaW4gPSBNYXRoLm1heChcbiAgICAwLFxuICAgIHZpc2libGVCZWdpbiAtICgxIC0gbGVhZEZhY3RvcikgKiBvdmVyc2Nhbkxlbmd0aCxcbiAgKTtcbiAgY29uc3Qgb3ZlcnNjYW5FbmQgPSBNYXRoLm1heCgwLCB2aXNpYmxlRW5kICsgbGVhZEZhY3RvciAqIG92ZXJzY2FuTGVuZ3RoKTtcblxuICBjb25zdCBsYXN0SXRlbU9mZnNldCA9IGdldEZyYW1lTWV0cmljc0FwcHJveChpdGVtQ291bnQgLSAxKS5vZmZzZXQ7XG4gIGlmIChsYXN0SXRlbU9mZnNldCA8IG92ZXJzY2FuQmVnaW4pIHtcbiAgICAvLyBFbnRpcmUgbGlzdCBpcyBiZWZvcmUgb3VyIG92ZXJzY2FuIHdpbmRvd1xuICAgIHJldHVybiB7XG4gICAgICBmaXJzdDogTWF0aC5tYXgoMCwgaXRlbUNvdW50IC0gMSAtIG1heFRvUmVuZGVyUGVyQmF0Y2gpLFxuICAgICAgbGFzdDogaXRlbUNvdW50IC0gMSxcbiAgICB9O1xuICB9XG5cbiAgLy8gRmluZCB0aGUgaW5kaWNlcyB0aGF0IGNvcnJlc3BvbmQgdG8gdGhlIGl0ZW1zIGF0IHRoZSByZW5kZXIgYm91bmRhcmllcyB3ZSdyZSB0YXJnZXRpbmcuXG4gIGxldCBbb3ZlcnNjYW5GaXJzdCwgZmlyc3QsIGxhc3QsIG92ZXJzY2FuTGFzdF0gPSBlbGVtZW50c1RoYXRPdmVybGFwT2Zmc2V0cyhcbiAgICBbb3ZlcnNjYW5CZWdpbiwgdmlzaWJsZUJlZ2luLCB2aXNpYmxlRW5kLCBvdmVyc2NhbkVuZF0sXG4gICAgaXRlbUNvdW50LFxuICAgIGdldEZyYW1lTWV0cmljc0FwcHJveCxcbiAgKTtcbiAgb3ZlcnNjYW5GaXJzdCA9IG92ZXJzY2FuRmlyc3QgPT0gbnVsbCA/IDAgOiBvdmVyc2NhbkZpcnN0O1xuICBmaXJzdCA9IGZpcnN0ID09IG51bGwgPyBNYXRoLm1heCgwLCBvdmVyc2NhbkZpcnN0KSA6IGZpcnN0O1xuICBvdmVyc2Nhbkxhc3QgPSBvdmVyc2Nhbkxhc3QgPT0gbnVsbCA/IGl0ZW1Db3VudCAtIDEgOiBvdmVyc2Nhbkxhc3Q7XG4gIGxhc3QgPVxuICAgIGxhc3QgPT0gbnVsbFxuICAgICAgPyBNYXRoLm1pbihvdmVyc2Nhbkxhc3QsIGZpcnN0ICsgbWF4VG9SZW5kZXJQZXJCYXRjaCAtIDEpXG4gICAgICA6IGxhc3Q7XG4gIGNvbnN0IHZpc2libGUgPSB7Zmlyc3QsIGxhc3R9O1xuXG4gIC8vIFdlIHdhbnQgdG8gbGltaXQgdGhlIG51bWJlciBvZiBuZXcgY2VsbHMgd2UncmUgcmVuZGVyaW5nIHBlciBiYXRjaCBzbyB0aGF0IHdlIGNhbiBmaWxsIHRoZVxuICAvLyBjb250ZW50IG9uIHRoZSBzY3JlZW4gcXVpY2tseS4gSWYgd2UgcmVuZGVyZWQgdGhlIGVudGlyZSBvdmVyc2NhbiB3aW5kb3cgYXQgb25jZSwgdGhlIHVzZXJcbiAgLy8gY291bGQgYmUgc3RhcmluZyBhdCB3aGl0ZSBzcGFjZSBmb3IgYSBsb25nIHRpbWUgd2FpdGluZyBmb3IgYSBidW5jaCBvZiBvZmZzY3JlZW4gY29udGVudCB0b1xuICAvLyByZW5kZXIuXG4gIGxldCBuZXdDZWxsQ291bnQgPSBuZXdSYW5nZUNvdW50KHByZXYsIHZpc2libGUpO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKGZpcnN0IDw9IG92ZXJzY2FuRmlyc3QgJiYgbGFzdCA+PSBvdmVyc2Nhbkxhc3QpIHtcbiAgICAgIC8vIElmIHdlIGZpbGwgdGhlIGVudGlyZSBvdmVyc2NhbiByYW5nZSwgd2UncmUgZG9uZS5cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjb25zdCBtYXhOZXdDZWxscyA9IG5ld0NlbGxDb3VudCA+PSBtYXhUb1JlbmRlclBlckJhdGNoO1xuICAgIGNvbnN0IGZpcnN0V2lsbEFkZE1vcmUgPSBmaXJzdCA8PSBwcmV2LmZpcnN0IHx8IGZpcnN0ID4gcHJldi5sYXN0O1xuICAgIGNvbnN0IGZpcnN0U2hvdWxkSW5jcmVtZW50ID1cbiAgICAgIGZpcnN0ID4gb3ZlcnNjYW5GaXJzdCAmJiAoIW1heE5ld0NlbGxzIHx8ICFmaXJzdFdpbGxBZGRNb3JlKTtcbiAgICBjb25zdCBsYXN0V2lsbEFkZE1vcmUgPSBsYXN0ID49IHByZXYubGFzdCB8fCBsYXN0IDwgcHJldi5maXJzdDtcbiAgICBjb25zdCBsYXN0U2hvdWxkSW5jcmVtZW50ID1cbiAgICAgIGxhc3QgPCBvdmVyc2Nhbkxhc3QgJiYgKCFtYXhOZXdDZWxscyB8fCAhbGFzdFdpbGxBZGRNb3JlKTtcbiAgICBpZiAobWF4TmV3Q2VsbHMgJiYgIWZpcnN0U2hvdWxkSW5jcmVtZW50ICYmICFsYXN0U2hvdWxkSW5jcmVtZW50KSB7XG4gICAgICAvLyBXZSBvbmx5IHdhbnQgdG8gc3RvcCBpZiB3ZSd2ZSBoaXQgbWF4TmV3Q2VsbHMgQU5EIHdlIGNhbm5vdCBpbmNyZW1lbnQgZmlyc3Qgb3IgbGFzdFxuICAgICAgLy8gd2l0aG91dCByZW5kZXJpbmcgbmV3IGl0ZW1zLiBUaGlzIGxldCdzIHVzIHByZXNlcnZlIGFzIG1hbnkgYWxyZWFkeSByZW5kZXJlZCBpdGVtcyBhc1xuICAgICAgLy8gcG9zc2libGUsIHJlZHVjaW5nIHJlbmRlciBjaHVybiBhbmQga2VlcGluZyB0aGUgcmVuZGVyZWQgb3ZlcnNjYW4gcmFuZ2UgYXMgbGFyZ2UgYXNcbiAgICAgIC8vIHBvc3NpYmxlLlxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIGZpcnN0U2hvdWxkSW5jcmVtZW50ICYmXG4gICAgICAhKGZpbGxQcmVmZXJlbmNlID09PSAnYWZ0ZXInICYmIGxhc3RTaG91bGRJbmNyZW1lbnQgJiYgbGFzdFdpbGxBZGRNb3JlKVxuICAgICkge1xuICAgICAgaWYgKGZpcnN0V2lsbEFkZE1vcmUpIHtcbiAgICAgICAgbmV3Q2VsbENvdW50Kys7XG4gICAgICB9XG4gICAgICBmaXJzdC0tO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBsYXN0U2hvdWxkSW5jcmVtZW50ICYmXG4gICAgICAhKGZpbGxQcmVmZXJlbmNlID09PSAnYmVmb3JlJyAmJiBmaXJzdFNob3VsZEluY3JlbWVudCAmJiBmaXJzdFdpbGxBZGRNb3JlKVxuICAgICkge1xuICAgICAgaWYgKGxhc3RXaWxsQWRkTW9yZSkge1xuICAgICAgICBuZXdDZWxsQ291bnQrKztcbiAgICAgIH1cbiAgICAgIGxhc3QrKztcbiAgICB9XG4gIH1cbiAgaWYgKFxuICAgICEoXG4gICAgICBsYXN0ID49IGZpcnN0ICYmXG4gICAgICBmaXJzdCA+PSAwICYmXG4gICAgICBsYXN0IDwgaXRlbUNvdW50ICYmXG4gICAgICBmaXJzdCA+PSBvdmVyc2NhbkZpcnN0ICYmXG4gICAgICBsYXN0IDw9IG92ZXJzY2FuTGFzdCAmJlxuICAgICAgZmlyc3QgPD0gdmlzaWJsZS5maXJzdCAmJlxuICAgICAgbGFzdCA+PSB2aXNpYmxlLmxhc3RcbiAgICApXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCYWQgd2luZG93IGNhbGN1bGF0aW9uICcgK1xuICAgICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgZmlyc3QsXG4gICAgICAgICAgbGFzdCxcbiAgICAgICAgICBpdGVtQ291bnQsXG4gICAgICAgICAgb3ZlcnNjYW5GaXJzdCxcbiAgICAgICAgICBvdmVyc2Nhbkxhc3QsXG4gICAgICAgICAgdmlzaWJsZSxcbiAgICAgICAgfSksXG4gICAgKTtcbiAgfVxuICByZXR1cm4ge2ZpcnN0LCBsYXN0fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGtleUV4dHJhY3RvcihpdGVtOiBhbnksIGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICBpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0/LmtleSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGl0ZW0ua2V5O1xuICB9XG4gIGlmICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcgJiYgaXRlbT8uaWQgIT0gbnVsbCkge1xuICAgIHJldHVybiBpdGVtLmlkO1xuICB9XG4gIHJldHVybiBTdHJpbmcoaW5kZXgpO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7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