8964110df4808237ccccd024623e7266
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var invariant = require('invariant');

var EventSubscriptionVendor = function () {
  function EventSubscriptionVendor() {
    (0, _classCallCheck2.default)(this, EventSubscriptionVendor);
    this._subscriptionsForType = {};
  }

  (0, _createClass2.default)(EventSubscriptionVendor, [{
    key: "addSubscription",
    value: function addSubscription(eventType, subscription) {
      invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');

      if (!this._subscriptionsForType[eventType]) {
        this._subscriptionsForType[eventType] = [];
      }

      var key = this._subscriptionsForType[eventType].length;

      this._subscriptionsForType[eventType].push(subscription);

      subscription.eventType = eventType;
      subscription.key = key;
      return subscription;
    }
  }, {
    key: "removeAllSubscriptions",
    value: function removeAllSubscriptions(eventType) {
      if (eventType == null) {
        this._subscriptionsForType = {};
      } else {
        delete this._subscriptionsForType[eventType];
      }
    }
  }, {
    key: "removeSubscription",
    value: function removeSubscription(subscription) {
      var eventType = subscription.eventType;
      var key = subscription.key;
      var subscriptionsForType = this._subscriptionsForType[eventType];

      if (subscriptionsForType) {
        delete subscriptionsForType[key];
      }
    }
  }, {
    key: "getSubscriptionsForType",
    value: function getSubscriptionsForType(eventType) {
      return this._subscriptionsForType[eventType];
    }
  }]);
  return EventSubscriptionVendor;
}();

module.exports = EventSubscriptionVendor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwiRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IiLCJfc3Vic2NyaXB0aW9uc0ZvclR5cGUiLCJldmVudFR5cGUiLCJzdWJzY3JpcHRpb24iLCJzdWJzY3JpYmVyIiwia2V5IiwibGVuZ3RoIiwicHVzaCIsInN1YnNjcmlwdGlvbnNGb3JUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIl9FdmVudFN1YnNjcmlwdGlvblZlbmRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbmltcG9ydCB0eXBlIEV2ZW50U3Vic2NyaXB0aW9uIGZyb20gJy4vX0V2ZW50U3Vic2NyaXB0aW9uJztcblxuLyoqXG4gKiBFdmVudFN1YnNjcmlwdGlvblZlbmRvciBzdG9yZXMgYSBzZXQgb2YgRXZlbnRTdWJzY3JpcHRpb25zIHRoYXQgYXJlXG4gKiBzdWJzY3JpYmVkIHRvIGEgcGFydGljdWxhciBldmVudCB0eXBlLlxuICovXG5jbGFzcyBFdmVudFN1YnNjcmlwdGlvblZlbmRvcjxFdmVudERlZmluaXRpb25zOiB7Li4ufT4ge1xuICBfc3Vic2NyaXB0aW9uc0ZvclR5cGU6IHtcbiAgICBbdHlwZTogJEtleXM8RXZlbnREZWZpbml0aW9ucz5dOiBBcnJheTxcbiAgICAgIEV2ZW50U3Vic2NyaXB0aW9uPEV2ZW50RGVmaW5pdGlvbnMsICRGbG93Rml4TWU+LFxuICAgID4sXG4gICAgLi4uLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlID0ge307XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIHN1YnNjcmlwdGlvbiBrZXllZCBieSBhbiBldmVudCB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlXG4gICAqIEBwYXJhbSB7RXZlbnRTdWJzY3JpcHRpb259IHN1YnNjcmlwdGlvblxuICAgKi9cbiAgYWRkU3Vic2NyaXB0aW9uPEs6ICRLZXlzPEV2ZW50RGVmaW5pdGlvbnM+PihcbiAgICBldmVudFR5cGU6IEssXG4gICAgc3Vic2NyaXB0aW9uOiBFdmVudFN1YnNjcmlwdGlvbjxFdmVudERlZmluaXRpb25zLCBLPixcbiAgKTogRXZlbnRTdWJzY3JpcHRpb248RXZlbnREZWZpbml0aW9ucywgSz4ge1xuICAgIGludmFyaWFudChcbiAgICAgIHN1YnNjcmlwdGlvbi5zdWJzY3JpYmVyID09PSB0aGlzLFxuICAgICAgJ1RoZSBzdWJzY3JpYmVyIG9mIHRoZSBzdWJzY3JpcHRpb24gaXMgaW5jb3JyZWN0bHkgc2V0LicsXG4gICAgKTtcbiAgICBpZiAoIXRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV0pIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV0gPSBbXTtcbiAgICB9XG4gICAgY29uc3Qga2V5ID0gdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXS5sZW5ndGg7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXS5wdXNoKHN1YnNjcmlwdGlvbik7XG4gICAgc3Vic2NyaXB0aW9uLmV2ZW50VHlwZSA9IGV2ZW50VHlwZTtcbiAgICBzdWJzY3JpcHRpb24ua2V5ID0ga2V5O1xuICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGJ1bGsgc2V0IG9mIHRoZSBzdWJzY3JpcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gez9zdHJpbmd9IGV2ZW50VHlwZSAtIE9wdGlvbmFsIG5hbWUgb2YgdGhlIGV2ZW50IHR5cGUgd2hvc2VcbiAgICogICByZWdpc3RlcmVkIHN1YnNjcmlwdGlvbnMgdG8gcmVtb3ZlLCBpZiBudWxsIHJlbW92ZSBhbGwgc3Vic2NyaXB0aW9ucy5cbiAgICovXG4gIHJlbW92ZUFsbFN1YnNjcmlwdGlvbnM8SzogJEtleXM8RXZlbnREZWZpbml0aW9ucz4+KGV2ZW50VHlwZTogP0spOiB2b2lkIHtcbiAgICBpZiAoZXZlbnRUeXBlID09IG51bGwpIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlID0ge307XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgc3BlY2lmaWMgc3Vic2NyaXB0aW9uLiBJbnN0ZWFkIG9mIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiwgY2FsbFxuICAgKiBgc3Vic2NyaXB0aW9uLnJlbW92ZSgpYCBkaXJlY3RseS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHN1YnNjcmlwdGlvblxuICAgKi9cbiAgcmVtb3ZlU3Vic2NyaXB0aW9uPEs6ICRLZXlzPEV2ZW50RGVmaW5pdGlvbnM+PihcbiAgICBzdWJzY3JpcHRpb246IEV2ZW50U3Vic2NyaXB0aW9uPEV2ZW50RGVmaW5pdGlvbnMsIEs+LFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBldmVudFR5cGUgPSBzdWJzY3JpcHRpb24uZXZlbnRUeXBlO1xuICAgIGNvbnN0IGtleSA9IHN1YnNjcmlwdGlvbi5rZXk7XG5cbiAgICBjb25zdCBzdWJzY3JpcHRpb25zRm9yVHlwZSA9IHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV07XG4gICAgaWYgKHN1YnNjcmlwdGlvbnNGb3JUeXBlKSB7XG4gICAgICBkZWxldGUgc3Vic2NyaXB0aW9uc0ZvclR5cGVba2V5XTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3Vic2NyaXB0aW9ucyB0aGF0IGFyZSBjdXJyZW50bHkgcmVnaXN0ZXJlZCBmb3IgdGhlXG4gICAqIGdpdmVuIGV2ZW50IHR5cGUuXG4gICAqXG4gICAqIE5vdGU6IFRoaXMgYXJyYXkgY2FuIGJlIHBvdGVudGlhbGx5IHNwYXJzZSBhcyBzdWJzY3JpcHRpb25zIGFyZSBkZWxldGVkXG4gICAqIGZyb20gaXQgd2hlbiB0aGV5IGFyZSByZW1vdmVkLlxuICAgKlxuICAgKiBUT0RPOiBUaGlzIHJldHVybnMgYSBudWxsYWJsZSBhcnJheS4gd2F0P1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlXG4gICAqIEByZXR1cm5zIHs/YXJyYXl9XG4gICAqL1xuICBnZXRTdWJzY3JpcHRpb25zRm9yVHlwZTxLOiAkS2V5czxFdmVudERlZmluaXRpb25zPj4oXG4gICAgZXZlbnRUeXBlOiBLLFxuICApOiA/QXJyYXk8RXZlbnRTdWJzY3JpcHRpb248RXZlbnREZWZpbml0aW9ucywgSz4+IHtcbiAgICByZXR1cm4gdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yO1xuIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7QUFFQSxJQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXpCOztJQVFNQyx1QjtFQVFKLG1DQUFjO0lBQUE7SUFDWixLQUFLQyxxQkFBTCxHQUE2QixFQUE3QjtFQUNEOzs7O1dBUUQseUJBQ0VDLFNBREYsRUFFRUMsWUFGRixFQUcwQztNQUN4Q0wsU0FBUyxDQUNQSyxZQUFZLENBQUNDLFVBQWIsS0FBNEIsSUFEckIsRUFFUCx3REFGTyxDQUFUOztNQUlBLElBQUksQ0FBQyxLQUFLSCxxQkFBTCxDQUEyQkMsU0FBM0IsQ0FBTCxFQUE0QztRQUMxQyxLQUFLRCxxQkFBTCxDQUEyQkMsU0FBM0IsSUFBd0MsRUFBeEM7TUFDRDs7TUFDRCxJQUFNRyxHQUFHLEdBQUcsS0FBS0oscUJBQUwsQ0FBMkJDLFNBQTNCLEVBQXNDSSxNQUFsRDs7TUFDQSxLQUFLTCxxQkFBTCxDQUEyQkMsU0FBM0IsRUFBc0NLLElBQXRDLENBQTJDSixZQUEzQzs7TUFDQUEsWUFBWSxDQUFDRCxTQUFiLEdBQXlCQSxTQUF6QjtNQUNBQyxZQUFZLENBQUNFLEdBQWIsR0FBbUJBLEdBQW5CO01BQ0EsT0FBT0YsWUFBUDtJQUNEOzs7V0FRRCxnQ0FBbURELFNBQW5ELEVBQXdFO01BQ3RFLElBQUlBLFNBQVMsSUFBSSxJQUFqQixFQUF1QjtRQUNyQixLQUFLRCxxQkFBTCxHQUE2QixFQUE3QjtNQUNELENBRkQsTUFFTztRQUNMLE9BQU8sS0FBS0EscUJBQUwsQ0FBMkJDLFNBQTNCLENBQVA7TUFDRDtJQUNGOzs7V0FRRCw0QkFDRUMsWUFERixFQUVRO01BQ04sSUFBTUQsU0FBUyxHQUFHQyxZQUFZLENBQUNELFNBQS9CO01BQ0EsSUFBTUcsR0FBRyxHQUFHRixZQUFZLENBQUNFLEdBQXpCO01BRUEsSUFBTUcsb0JBQW9CLEdBQUcsS0FBS1AscUJBQUwsQ0FBMkJDLFNBQTNCLENBQTdCOztNQUNBLElBQUlNLG9CQUFKLEVBQTBCO1FBQ3hCLE9BQU9BLG9CQUFvQixDQUFDSCxHQUFELENBQTNCO01BQ0Q7SUFDRjs7O1dBY0QsaUNBQ0VILFNBREYsRUFFa0Q7TUFDaEQsT0FBTyxLQUFLRCxxQkFBTCxDQUEyQkMsU0FBM0IsQ0FBUDtJQUNEOzs7OztBQUdITyxNQUFNLENBQUNDLE9BQVAsR0FBaUJWLHVCQUFqQiJ9