90b1c3e7773a62c58be25784d4ea8feb
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var DeprecatedColorPropType = require('./DeprecatedColorPropType');

var DeprecatedViewStylePropTypes = require('./DeprecatedViewStylePropTypes');

var ReactPropTypes = require('prop-types');

var DeprecatedTextStylePropTypes = (0, _extends2.default)({}, DeprecatedViewStylePropTypes, {
  color: DeprecatedColorPropType,
  fontFamily: ReactPropTypes.string,
  fontSize: ReactPropTypes.number,
  fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
  fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
  fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
  textShadowOffset: ReactPropTypes.shape({
    width: ReactPropTypes.number,
    height: ReactPropTypes.number
  }),
  textShadowRadius: ReactPropTypes.number,
  textShadowColor: DeprecatedColorPropType,
  letterSpacing: ReactPropTypes.number,
  lineHeight: ReactPropTypes.number,
  textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
  textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
  includeFontPadding: ReactPropTypes.bool,
  textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
  textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
  textDecorationColor: DeprecatedColorPropType,
  textTransform: ReactPropTypes.oneOf(['none', 'capitalize', 'uppercase', 'lowercase']),
  writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
});
module.exports = DeprecatedTextStylePropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,