ca8436cd407ece7370b14ec4333307df
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var NativeAnimatedHelper = require('../NativeAnimatedHelper');

var startNativeAnimationNextId = 1;

var Animation = function () {
  function Animation() {
    (0, _classCallCheck2.default)(this, Animation);
  }

  (0, _createClass2.default)(Animation, [{
    key: "start",
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
  }, {
    key: "stop",
    value: function stop() {
      if (this.__nativeId) {
        NativeAnimatedHelper.API.stopAnimation(this.__nativeId);
      }
    }
  }, {
    key: "__getNativeAnimationConfig",
    value: function __getNativeAnimationConfig() {
      throw new Error('This animation type cannot be offloaded to native');
    }
  }, {
    key: "__debouncedOnEnd",
    value: function __debouncedOnEnd(result) {
      var onEnd = this.__onEnd;
      this.__onEnd = null;
      onEnd && onEnd(result);
    }
  }, {
    key: "__startNativeAnimation",
    value: function __startNativeAnimation(animatedValue) {
      var startNativeAnimationWaitId = startNativeAnimationNextId + ":startAnimation";
      startNativeAnimationNextId += 1;
      NativeAnimatedHelper.API.setWaitingForIdentifier(startNativeAnimationWaitId);

      try {
        animatedValue.__makeNative();

        this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
        NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
      } catch (e) {
        throw e;
      } finally {
        NativeAnimatedHelper.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);
      }
    }
  }]);
  return Animation;
}();

module.exports = Animation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOYXRpdmVBbmltYXRlZEhlbHBlciIsInJlcXVpcmUiLCJzdGFydE5hdGl2ZUFuaW1hdGlvbk5leHRJZCIsIkFuaW1hdGlvbiIsImZyb21WYWx1ZSIsIm9uVXBkYXRlIiwib25FbmQiLCJwcmV2aW91c0FuaW1hdGlvbiIsImFuaW1hdGVkVmFsdWUiLCJfX25hdGl2ZUlkIiwiQVBJIiwic3RvcEFuaW1hdGlvbiIsIkVycm9yIiwicmVzdWx0IiwiX19vbkVuZCIsInN0YXJ0TmF0aXZlQW5pbWF0aW9uV2FpdElkIiwic2V0V2FpdGluZ0ZvcklkZW50aWZpZXIiLCJfX21ha2VOYXRpdmUiLCJnZW5lcmF0ZU5ld0FuaW1hdGlvbklkIiwic3RhcnRBbmltYXRpbmdOb2RlIiwiX19nZXROYXRpdmVUYWciLCJfX2dldE5hdGl2ZUFuaW1hdGlvbkNvbmZpZyIsIl9fZGVib3VuY2VkT25FbmQiLCJiaW5kIiwiZSIsInVuc2V0V2FpdGluZ0ZvcklkZW50aWZpZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQW5pbWF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IE5hdGl2ZUFuaW1hdGVkSGVscGVyID0gcmVxdWlyZSgnLi4vTmF0aXZlQW5pbWF0ZWRIZWxwZXInKTtcblxuaW1wb3J0IHR5cGUgQW5pbWF0ZWRWYWx1ZSBmcm9tICcuLi9ub2Rlcy9BbmltYXRlZFZhbHVlJztcblxuZXhwb3J0IHR5cGUgRW5kUmVzdWx0ID0ge2ZpbmlzaGVkOiBib29sZWFuLCAuLi59O1xuZXhwb3J0IHR5cGUgRW5kQ2FsbGJhY2sgPSAocmVzdWx0OiBFbmRSZXN1bHQpID0+IHZvaWQ7XG5cbmV4cG9ydCB0eXBlIEFuaW1hdGlvbkNvbmZpZyA9IHtcbiAgaXNJbnRlcmFjdGlvbj86IGJvb2xlYW4sXG4gIHVzZU5hdGl2ZURyaXZlcjogYm9vbGVhbixcbiAgb25Db21wbGV0ZT86ID9FbmRDYWxsYmFjayxcbiAgaXRlcmF0aW9ucz86IG51bWJlcixcbn07XG5cbmxldCBzdGFydE5hdGl2ZUFuaW1hdGlvbk5leHRJZCA9IDE7XG5cbi8vIEltcG9ydGFudCBub3RlOiBzdGFydCgpIGFuZCBzdG9wKCkgd2lsbCBvbmx5IGJlIGNhbGxlZCBhdCBtb3N0IG9uY2UuXG4vLyBPbmNlIGFuIGFuaW1hdGlvbiBoYXMgYmVlbiBzdG9wcGVkIG9yIGZpbmlzaGVkIGl0cyBjb3Vyc2UsIGl0IHdpbGxcbi8vIG5vdCBiZSByZXVzZWQuXG5jbGFzcyBBbmltYXRpb24ge1xuICBfX2FjdGl2ZTogYm9vbGVhbjtcbiAgX19pc0ludGVyYWN0aW9uOiBib29sZWFuO1xuICBfX25hdGl2ZUlkOiBudW1iZXI7XG4gIF9fb25FbmQ6ID9FbmRDYWxsYmFjaztcbiAgX19pdGVyYXRpb25zOiBudW1iZXI7XG4gIHN0YXJ0KFxuICAgIGZyb21WYWx1ZTogbnVtYmVyLFxuICAgIG9uVXBkYXRlOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZCxcbiAgICBvbkVuZDogP0VuZENhbGxiYWNrLFxuICAgIHByZXZpb3VzQW5pbWF0aW9uOiA/QW5pbWF0aW9uLFxuICAgIGFuaW1hdGVkVmFsdWU6IEFuaW1hdGVkVmFsdWUsXG4gICk6IHZvaWQge31cbiAgc3RvcCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fX25hdGl2ZUlkKSB7XG4gICAgICBOYXRpdmVBbmltYXRlZEhlbHBlci5BUEkuc3RvcEFuaW1hdGlvbih0aGlzLl9fbmF0aXZlSWQpO1xuICAgIH1cbiAgfVxuICBfX2dldE5hdGl2ZUFuaW1hdGlvbkNvbmZpZygpOiBhbnkge1xuICAgIC8vIFN1YmNsYXNzZXMgdGhhdCBoYXZlIGNvcnJlc3BvbmRpbmcgYW5pbWF0aW9uIGltcGxlbWVudGF0aW9uIGRvbmUgaW4gbmF0aXZlXG4gICAgLy8gc2hvdWxkIG92ZXJyaWRlIHRoaXMgbWV0aG9kXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGFuaW1hdGlvbiB0eXBlIGNhbm5vdCBiZSBvZmZsb2FkZWQgdG8gbmF0aXZlJyk7XG4gIH1cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIGZvciBzdWJjbGFzc2VzIHRvIG1ha2Ugc3VyZSBvbkVuZCBpcyBvbmx5IGNhbGxlZCBvbmNlLlxuICBfX2RlYm91bmNlZE9uRW5kKHJlc3VsdDogRW5kUmVzdWx0KTogdm9pZCB7XG4gICAgY29uc3Qgb25FbmQgPSB0aGlzLl9fb25FbmQ7XG4gICAgdGhpcy5fX29uRW5kID0gbnVsbDtcbiAgICBvbkVuZCAmJiBvbkVuZChyZXN1bHQpO1xuICB9XG4gIF9fc3RhcnROYXRpdmVBbmltYXRpb24oYW5pbWF0ZWRWYWx1ZTogQW5pbWF0ZWRWYWx1ZSk6IHZvaWQge1xuICAgIGNvbnN0IHN0YXJ0TmF0aXZlQW5pbWF0aW9uV2FpdElkID0gYCR7c3RhcnROYXRpdmVBbmltYXRpb25OZXh0SWR9OnN0YXJ0QW5pbWF0aW9uYDtcbiAgICBzdGFydE5hdGl2ZUFuaW1hdGlvbk5leHRJZCArPSAxO1xuICAgIE5hdGl2ZUFuaW1hdGVkSGVscGVyLkFQSS5zZXRXYWl0aW5nRm9ySWRlbnRpZmllcihcbiAgICAgIHN0YXJ0TmF0aXZlQW5pbWF0aW9uV2FpdElkLFxuICAgICk7XG4gICAgdHJ5IHtcbiAgICAgIGFuaW1hdGVkVmFsdWUuX19tYWtlTmF0aXZlKCk7XG4gICAgICB0aGlzLl9fbmF0aXZlSWQgPSBOYXRpdmVBbmltYXRlZEhlbHBlci5nZW5lcmF0ZU5ld0FuaW1hdGlvbklkKCk7XG4gICAgICBOYXRpdmVBbmltYXRlZEhlbHBlci5BUEkuc3RhcnRBbmltYXRpbmdOb2RlKFxuICAgICAgICB0aGlzLl9fbmF0aXZlSWQsXG4gICAgICAgIGFuaW1hdGVkVmFsdWUuX19nZXROYXRpdmVUYWcoKSxcbiAgICAgICAgdGhpcy5fX2dldE5hdGl2ZUFuaW1hdGlvbkNvbmZpZygpLFxuICAgICAgICAvLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddIGFkZGVkIHdoZW4gaW1wcm92aW5nIHR5cGluZyBmb3IgdGhpcyBwYXJhbWV0ZXJzXG4gICAgICAgIHRoaXMuX19kZWJvdW5jZWRPbkVuZC5iaW5kKHRoaXMpLFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBOYXRpdmVBbmltYXRlZEhlbHBlci5BUEkudW5zZXRXYWl0aW5nRm9ySWRlbnRpZmllcihcbiAgICAgICAgc3RhcnROYXRpdmVBbmltYXRpb25XYWl0SWQsXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFuaW1hdGlvbjtcbiJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7Ozs7O0FBRUEsSUFBTUEsb0JBQW9CLEdBQUdDLE9BQU8sQ0FBQyx5QkFBRCxDQUFwQzs7QUFjQSxJQUFJQywwQkFBMEIsR0FBRyxDQUFqQzs7SUFLTUMsUzs7Ozs7OztXQU1KLGVBQ0VDLFNBREYsRUFFRUMsUUFGRixFQUdFQyxLQUhGLEVBSUVDLGlCQUpGLEVBS0VDLGFBTEYsRUFNUSxDQUFFOzs7V0FDVixnQkFBYTtNQUNYLElBQUksS0FBS0MsVUFBVCxFQUFxQjtRQUNuQlQsb0JBQW9CLENBQUNVLEdBQXJCLENBQXlCQyxhQUF6QixDQUF1QyxLQUFLRixVQUE1QztNQUNEO0lBQ0Y7OztXQUNELHNDQUFrQztNQUdoQyxNQUFNLElBQUlHLEtBQUosQ0FBVSxtREFBVixDQUFOO0lBQ0Q7OztXQUVELDBCQUFpQkMsTUFBakIsRUFBMEM7TUFDeEMsSUFBTVAsS0FBSyxHQUFHLEtBQUtRLE9BQW5CO01BQ0EsS0FBS0EsT0FBTCxHQUFlLElBQWY7TUFDQVIsS0FBSyxJQUFJQSxLQUFLLENBQUNPLE1BQUQsQ0FBZDtJQUNEOzs7V0FDRCxnQ0FBdUJMLGFBQXZCLEVBQTJEO01BQ3pELElBQU1PLDBCQUEwQixHQUFNYiwwQkFBTixvQkFBaEM7TUFDQUEsMEJBQTBCLElBQUksQ0FBOUI7TUFDQUYsb0JBQW9CLENBQUNVLEdBQXJCLENBQXlCTSx1QkFBekIsQ0FDRUQsMEJBREY7O01BR0EsSUFBSTtRQUNGUCxhQUFhLENBQUNTLFlBQWQ7O1FBQ0EsS0FBS1IsVUFBTCxHQUFrQlQsb0JBQW9CLENBQUNrQixzQkFBckIsRUFBbEI7UUFDQWxCLG9CQUFvQixDQUFDVSxHQUFyQixDQUF5QlMsa0JBQXpCLENBQ0UsS0FBS1YsVUFEUCxFQUVFRCxhQUFhLENBQUNZLGNBQWQsRUFGRixFQUdFLEtBQUtDLDBCQUFMLEVBSEYsRUFLRSxLQUFLQyxnQkFBTCxDQUFzQkMsSUFBdEIsQ0FBMkIsSUFBM0IsQ0FMRjtNQU9ELENBVkQsQ0FVRSxPQUFPQyxDQUFQLEVBQVU7UUFDVixNQUFNQSxDQUFOO01BQ0QsQ0FaRCxTQVlVO1FBQ1J4QixvQkFBb0IsQ0FBQ1UsR0FBckIsQ0FBeUJlLHlCQUF6QixDQUNFViwwQkFERjtNQUdEO0lBQ0Y7Ozs7O0FBR0hXLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnhCLFNBQWpCIn0=