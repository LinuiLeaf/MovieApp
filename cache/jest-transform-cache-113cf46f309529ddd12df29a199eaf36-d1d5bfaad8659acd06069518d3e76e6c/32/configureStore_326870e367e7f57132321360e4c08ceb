0ec97686d73c4c90eae738d4cec24e8c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _sagas = _interopRequireDefault(require("../sagas"));

var _reduxReset = _interopRequireDefault(require("redux-reset"));

var _reducers = _interopRequireDefault(require("../reducers"));

var _reduxLogger = require("redux-logger");

var _reduxSaga = _interopRequireDefault(require("redux-saga"));

var _redux = require("redux");

var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));

var _reduxPersist = require("redux-persist");

var config = {
  key: "root",
  storage: _asyncStorage.default,
  whitelist: ["watchlistReducer"],
  blacklist: [],
  debug: true
};
var middleware = [];
var sagaMiddleware = (0, _reduxSaga.default)();
middleware.push(sagaMiddleware);

if (__DEV__) {
  middleware.push((0, _reduxLogger.createLogger)());
}

var reducers = (0, _reduxPersist.persistCombineReducers)(config, _reducers.default);
var enhancers = [_redux.applyMiddleware.apply(void 0, middleware), (0, _reduxReset.default)()];
var persistConfig = {
  enhancers: enhancers
};
var store = (0, _redux.createStore)(reducers, undefined, _redux.compose.apply(void 0, enhancers));
var persistor = (0, _reduxPersist.persistStore)(store, persistConfig, function () {});

var configureStore = function configureStore() {
  return {
    persistor: persistor,
    store: store
  };
};

sagaMiddleware.run(_sagas.default);
var _default = configureStore;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25maWciLCJrZXkiLCJzdG9yYWdlIiwiQXN5bmNTdG9yYWdlIiwid2hpdGVsaXN0IiwiYmxhY2tsaXN0IiwiZGVidWciLCJtaWRkbGV3YXJlIiwic2FnYU1pZGRsZXdhcmUiLCJjcmVhdGVTYWdhTWlkZGxld2FyZSIsInB1c2giLCJfX0RFVl9fIiwiY3JlYXRlTG9nZ2VyIiwicmVkdWNlcnMiLCJwZXJzaXN0Q29tYmluZVJlZHVjZXJzIiwicm9vdFJlZHVjZXJzIiwiZW5oYW5jZXJzIiwiYXBwbHlNaWRkbGV3YXJlIiwicmVkdXhSZXNldCIsInBlcnNpc3RDb25maWciLCJzdG9yZSIsImNyZWF0ZVN0b3JlIiwidW5kZWZpbmVkIiwiY29tcG9zZSIsInBlcnNpc3RvciIsInBlcnNpc3RTdG9yZSIsImNvbmZpZ3VyZVN0b3JlIiwicnVuIiwic2FnYXMiXSwic291cmNlcyI6WyJjb25maWd1cmVTdG9yZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgb24gSlVMIDE2LCAyMDIyXG4gKiBDb25maWd1cmVTdG9yZSAtIFN0b3JlIGNvbmZpZ3VyaW5nLlxuICovXG5cbmltcG9ydCBzYWdhcyBmcm9tIFwiLi4vc2FnYXNcIjtcbmltcG9ydCByZWR1eFJlc2V0IGZyb20gXCJyZWR1eC1yZXNldFwiO1xuaW1wb3J0IHJvb3RSZWR1Y2VycyBmcm9tIFwiLi4vcmVkdWNlcnNcIjtcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gXCJyZWR1eC1sb2dnZXJcIjtcbmltcG9ydCBjcmVhdGVTYWdhTWlkZGxld2FyZSBmcm9tIFwicmVkdXgtc2FnYVwiO1xuaW1wb3J0IHsgY3JlYXRlU3RvcmUsIGNvbXBvc2UsIGFwcGx5TWlkZGxld2FyZSB9IGZyb20gXCJyZWR1eFwiO1xuaW1wb3J0IEFzeW5jU3RvcmFnZSBmcm9tIFwiQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2VcIjtcbmltcG9ydCB7IHBlcnNpc3RTdG9yZSwgcGVyc2lzdENvbWJpbmVSZWR1Y2VycyB9IGZyb20gXCJyZWR1eC1wZXJzaXN0XCI7XG5cbmNvbnN0IGNvbmZpZyA9IHtcbiAga2V5OiBcInJvb3RcIixcbiAgc3RvcmFnZTogQXN5bmNTdG9yYWdlLFxuICB3aGl0ZWxpc3Q6IFtcIndhdGNobGlzdFJlZHVjZXJcIl0sIC8vdG8gcGVyc2lzdCByZWR1Y2VyIGRhdGFcbiAgYmxhY2tsaXN0OiBbXSwgLy90byByZW1vdmUgcmVkdWNlciB0byBwZXJzaXN0XG4gIGRlYnVnOiB0cnVlLCAvL3RvIGdldCB1c2VmdWwgbG9nZ2luZ1xufTtcblxuY29uc3QgbWlkZGxld2FyZSA9IFtdO1xuY29uc3Qgc2FnYU1pZGRsZXdhcmUgPSBjcmVhdGVTYWdhTWlkZGxld2FyZSgpO1xuXG5taWRkbGV3YXJlLnB1c2goc2FnYU1pZGRsZXdhcmUpO1xuXG5pZiAoX19ERVZfXykge1xuICBtaWRkbGV3YXJlLnB1c2goY3JlYXRlTG9nZ2VyKCkpO1xufVxuXG5jb25zdCByZWR1Y2VycyA9IHBlcnNpc3RDb21iaW5lUmVkdWNlcnMoY29uZmlnLCByb290UmVkdWNlcnMpO1xuY29uc3QgZW5oYW5jZXJzID0gW2FwcGx5TWlkZGxld2FyZSguLi5taWRkbGV3YXJlKSwgcmVkdXhSZXNldCgpXTtcblxuY29uc3QgcGVyc2lzdENvbmZpZyA9IHsgZW5oYW5jZXJzIH07XG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKHJlZHVjZXJzLCB1bmRlZmluZWQsIGNvbXBvc2UoLi4uZW5oYW5jZXJzKSk7XG5jb25zdCBwZXJzaXN0b3IgPSBwZXJzaXN0U3RvcmUoc3RvcmUsIHBlcnNpc3RDb25maWcsICgpID0+IHt9KTtcbmNvbnN0IGNvbmZpZ3VyZVN0b3JlID0gKCkgPT4ge1xuICByZXR1cm4geyBwZXJzaXN0b3IsIHN0b3JlIH07XG59O1xuXG5zYWdhTWlkZGxld2FyZS5ydW4oc2FnYXMpO1xuXG5leHBvcnQgZGVmYXVsdCBjb25maWd1cmVTdG9yZTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUtBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLElBQU1BLE1BQU0sR0FBRztFQUNiQyxHQUFHLEVBQUUsTUFEUTtFQUViQyxPQUFPLEVBQUVDLHFCQUZJO0VBR2JDLFNBQVMsRUFBRSxDQUFDLGtCQUFELENBSEU7RUFJYkMsU0FBUyxFQUFFLEVBSkU7RUFLYkMsS0FBSyxFQUFFO0FBTE0sQ0FBZjtBQVFBLElBQU1DLFVBQVUsR0FBRyxFQUFuQjtBQUNBLElBQU1DLGNBQWMsR0FBRyxJQUFBQyxrQkFBQSxHQUF2QjtBQUVBRixVQUFVLENBQUNHLElBQVgsQ0FBZ0JGLGNBQWhCOztBQUVBLElBQUlHLE9BQUosRUFBYTtFQUNYSixVQUFVLENBQUNHLElBQVgsQ0FBZ0IsSUFBQUUseUJBQUEsR0FBaEI7QUFDRDs7QUFFRCxJQUFNQyxRQUFRLEdBQUcsSUFBQUMsb0NBQUEsRUFBdUJkLE1BQXZCLEVBQStCZSxpQkFBL0IsQ0FBakI7QUFDQSxJQUFNQyxTQUFTLEdBQUcsQ0FBQ0Msc0JBQUEsZUFBbUJWLFVBQW5CLENBQUQsRUFBaUMsSUFBQVcsbUJBQUEsR0FBakMsQ0FBbEI7QUFFQSxJQUFNQyxhQUFhLEdBQUc7RUFBRUgsU0FBUyxFQUFUQTtBQUFGLENBQXRCO0FBQ0EsSUFBTUksS0FBSyxHQUFHLElBQUFDLGtCQUFBLEVBQVlSLFFBQVosRUFBc0JTLFNBQXRCLEVBQWlDQyxjQUFBLGVBQVdQLFNBQVgsQ0FBakMsQ0FBZDtBQUNBLElBQU1RLFNBQVMsR0FBRyxJQUFBQywwQkFBQSxFQUFhTCxLQUFiLEVBQW9CRCxhQUFwQixFQUFtQyxZQUFNLENBQUUsQ0FBM0MsQ0FBbEI7O0FBQ0EsSUFBTU8sY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixHQUFNO0VBQzNCLE9BQU87SUFBRUYsU0FBUyxFQUFUQSxTQUFGO0lBQWFKLEtBQUssRUFBTEE7RUFBYixDQUFQO0FBQ0QsQ0FGRDs7QUFJQVosY0FBYyxDQUFDbUIsR0FBZixDQUFtQkMsY0FBbkI7ZUFFZUYsYyJ9