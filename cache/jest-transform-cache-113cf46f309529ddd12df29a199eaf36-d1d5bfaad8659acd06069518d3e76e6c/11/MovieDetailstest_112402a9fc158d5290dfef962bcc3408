6bcc4001e255c9e3ee1681d342676e23
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _reactNative = require("react-native");

var _react = _interopRequireDefault(require("react"));

var _MovieDetails = _interopRequireDefault(require("../app/screens/MovieDetails/MovieDetails"));

var _constants = _interopRequireDefault(require("../app/config/constants"));

var _enzyme = require("enzyme");

var _reactRedux = require("react-redux");

var _configureStore = _interopRequireDefault(require("../app/store/configureStore"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _reactNative2 = require("@testing-library/react-native");

var _jestNative = require("@testing-library/jest-native");

require("@testing-library/jest-native/extend-expect");

var findTextElement = function findTextElement(tree, element) {
  return true;
};

describe("Movie Details Screen ", function () {
  var wrapper = _reactTestRenderer.default.create(_react.default.createElement(_MovieDetails.default, null)).toJSON();

  test("Snapshot ", function () {
    expect(wrapper).toMatchSnapshot();
  });
  it("Image must contain an src", function _callee() {
    var _await$render, getByAltText, image;

    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator.default.awrap((0, _reactNative2.render)(_react.default.createElement(_MovieDetails.default, null)));

          case 2:
            _await$render = _context.sent;
            getByAltText = _await$render.getByAltText;
            image = _reactNative2.screen.getByTestId("poster");
            expect(image.props.source.uri).toContain("https://image.tmdb.org/t/p/w300undefined");

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("Image must have a style", function _callee2() {
    var _await$render2, getByAltText, image;

    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _regenerator.default.awrap((0, _reactNative2.render)(_react.default.createElement(_MovieDetails.default, null)));

          case 2:
            _await$render2 = _context2.sent;
            getByAltText = _await$render2.getByAltText;
            image = _reactNative2.screen.getByTestId("sub_poster");
            expect(image.props.style).toHaveStyle({
              height: 210,
              borderBottomLeftRadius: 16,
              borderBottomRightRadius: 16
            });

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("It must have a about movie section", function _callee3() {
    var _render, getByText;

    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _render = (0, _reactNative2.render)(_react.default.createElement(_MovieDetails.default, null)), getByText = _render.getByText;
            getByText("About Movie", {
              exact: false
            });

          case 2:
          case "end":
            return _context3.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("It must have a about Overviews section", function _callee4() {
    var _render2, getByText;

    return _regenerator.default.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _render2 = (0, _reactNative2.render)(_react.default.createElement(_MovieDetails.default, null)), getByText = _render2.getByText;
            getByText("Overviews", {
              exact: false
            });

          case 2:
          case "end":
            return _context4.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("It must have a Release Date", function _callee5() {
    var _render3, getByText;

    return _regenerator.default.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _render3 = (0, _reactNative2.render)(_react.default.createElement(_MovieDetails.default, null)), getByText = _render3.getByText;
            getByText("Release Date:", {
              exact: true
            });

          case 2:
          case "end":
            return _context5.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("It must have a about movie rating section", function _callee6() {
    var _render4, getByText;

    return _regenerator.default.async(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _render4 = (0, _reactNative2.render)(_react.default.createElement(_MovieDetails.default, null)), getByText = _render4.getByText;
            getByText("Average Rating:", {
              exact: false
            });

          case 2:
          case "end":
            return _context6.stop();
        }
      }
    }, null, null, null, Promise);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmaW5kVGV4dEVsZW1lbnQiLCJ0cmVlIiwiZWxlbWVudCIsImRlc2NyaWJlIiwid3JhcHBlciIsInJlbmRlcmVyIiwiY3JlYXRlIiwidG9KU09OIiwidGVzdCIsImV4cGVjdCIsInRvTWF0Y2hTbmFwc2hvdCIsIml0IiwicmVuZGVyIiwiZ2V0QnlBbHRUZXh0IiwiaW1hZ2UiLCJzY3JlZW4iLCJnZXRCeVRlc3RJZCIsInByb3BzIiwic291cmNlIiwidXJpIiwidG9Db250YWluIiwic3R5bGUiLCJ0b0hhdmVTdHlsZSIsImhlaWdodCIsImJvcmRlckJvdHRvbUxlZnRSYWRpdXMiLCJib3JkZXJCb3R0b21SaWdodFJhZGl1cyIsImdldEJ5VGV4dCIsImV4YWN0Il0sInNvdXJjZXMiOlsiTW92aWVEZXRhaWxzLXRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgTW92aWVEZXRhaWxzIGZyb20gXCIuLi9hcHAvc2NyZWVucy9Nb3ZpZURldGFpbHMvTW92aWVEZXRhaWxzXCI7XG5pbXBvcnQgY29uc3RhbnRzIGZyb20gXCIuLi9hcHAvY29uZmlnL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgeyBzaGFsbG93LCBjb25maWd1cmUsIG1vdW50IH0gZnJvbSBcImVuenltZVwiO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBzdG9yZSBmcm9tIFwiLi4vYXBwL3N0b3JlL2NvbmZpZ3VyZVN0b3JlXCI7XG4vLyBOb3RlOiB0ZXN0IHJlbmRlcmVyIG11c3QgYmUgcmVxdWlyZWQgYWZ0ZXIgcmVhY3QtbmF0aXZlLlxuaW1wb3J0IHJlbmRlcmVyIGZyb20gXCJyZWFjdC10ZXN0LXJlbmRlcmVyXCI7XG5pbXBvcnQgeyByZW5kZXIsIGNvbnRhaW5lciwgc2NyZWVuIH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgeyB0b0hhdmVTdHlsZSB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L2plc3QtbmF0aXZlXCI7XG5pbXBvcnQgXCJAdGVzdGluZy1saWJyYXJ5L2plc3QtbmF0aXZlL2V4dGVuZC1leHBlY3RcIjtcblxubGV0IGZpbmRUZXh0RWxlbWVudCA9IGZ1bmN0aW9uICh0cmVlLCBlbGVtZW50KSB7XG4gIC8vIGNvbnNvbGUud2Fybih0cmVlLmNoaWxkcmVuKTtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5kZXNjcmliZShcIk1vdmllIERldGFpbHMgU2NyZWVuIFwiLCAoKSA9PiB7XG4gIGNvbnN0IHdyYXBwZXIgPSByZW5kZXJlci5jcmVhdGUoPE1vdmllRGV0YWlscyAvPikudG9KU09OKCk7XG5cbiAgdGVzdChcIlNuYXBzaG90IFwiLCAoKSA9PiB7XG4gICAgZXhwZWN0KHdyYXBwZXIpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICB9KTtcbiAgaXQoXCJJbWFnZSBtdXN0IGNvbnRhaW4gYW4gc3JjXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5QWx0VGV4dCB9ID0gYXdhaXQgcmVuZGVyKDxNb3ZpZURldGFpbHMgLz4pO1xuXG4gICAgY29uc3QgaW1hZ2UgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoXCJwb3N0ZXJcIik7XG4gICAgZXhwZWN0KGltYWdlLnByb3BzLnNvdXJjZS51cmkpLnRvQ29udGFpbihcbiAgICAgIFwiaHR0cHM6Ly9pbWFnZS50bWRiLm9yZy90L3AvdzMwMHVuZGVmaW5lZFwiXG4gICAgKTtcbiAgfSk7XG4gIGl0KFwiSW1hZ2UgbXVzdCBoYXZlIGEgc3R5bGVcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlBbHRUZXh0IH0gPSBhd2FpdCByZW5kZXIoPE1vdmllRGV0YWlscyAvPik7XG5cbiAgICBjb25zdCBpbWFnZSA9IHNjcmVlbi5nZXRCeVRlc3RJZChcInN1Yl9wb3N0ZXJcIik7XG4gICAgZXhwZWN0KGltYWdlLnByb3BzLnN0eWxlKS50b0hhdmVTdHlsZSh7XG4gICAgICBoZWlnaHQ6IDIxMCxcbiAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IDE2LFxuICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IDE2LFxuICAgIH0pO1xuICB9KTtcbiAgaXQoXCJJdCBtdXN0IGhhdmUgYSBhYm91dCBtb3ZpZSBzZWN0aW9uXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxNb3ZpZURldGFpbHMgLz4pO1xuICAgIGdldEJ5VGV4dChcIkFib3V0IE1vdmllXCIsIHsgZXhhY3Q6IGZhbHNlIH0pO1xuICB9KTtcbiAgaXQoXCJJdCBtdXN0IGhhdmUgYSBhYm91dCBPdmVydmlld3Mgc2VjdGlvblwiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8TW92aWVEZXRhaWxzIC8+KTtcbiAgICBnZXRCeVRleHQoXCJPdmVydmlld3NcIiwgeyBleGFjdDogZmFsc2UgfSk7XG4gIH0pO1xuICBpdChcIkl0IG11c3QgaGF2ZSBhIFJlbGVhc2UgRGF0ZVwiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8TW92aWVEZXRhaWxzIC8+KTtcbiAgICBnZXRCeVRleHQoXCJSZWxlYXNlIERhdGU6XCIsIHsgZXhhY3Q6IHRydWUgfSk7XG4gIH0pO1xuICBpdChcIkl0IG11c3QgaGF2ZSBhIGFib3V0IG1vdmllIHJhdGluZyBzZWN0aW9uXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxNb3ZpZURldGFpbHMgLz4pO1xuICAgIGdldEJ5VGV4dChcIkF2ZXJhZ2UgUmF0aW5nOlwiLCB7IGV4YWN0OiBmYWxzZSB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6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