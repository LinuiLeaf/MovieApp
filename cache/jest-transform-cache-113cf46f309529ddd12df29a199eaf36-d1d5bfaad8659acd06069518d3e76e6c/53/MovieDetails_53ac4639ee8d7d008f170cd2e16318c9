26528c2338f3aa99be316152b8e82942
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _reactNative = require("react-native");

var _styles = _interopRequireDefault(require("./styles"));

var _react = _interopRequireWildcard(require("react"));

var _images = _interopRequireDefault(require("../../config/images"));

var _constants = _interopRequireDefault(require("../../config/constants"));

var _hudView = _interopRequireDefault(require("../../components/hudView"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var MovieDetails = function (_Component) {
  (0, _inherits2.default)(MovieDetails, _Component);

  var _super = _createSuper(MovieDetails);

  function MovieDetails(props) {
    var _this;

    (0, _classCallCheck2.default)(this, MovieDetails);
    _this = _super.call(this, props);

    _this._didTapOnBackButton = function () {
      _this.props.navigation.goBack();
    };

    _this._addToWatchList = function () {
      var _this$props$navigatio = _this.props.navigation.state.params,
          item = _this$props$navigatio.item,
          id = _this$props$navigatio.id;
      var _this$props = _this.props,
          watchlistItems = _this$props.watchlistItems,
          updateWatchlist = _this$props.updateWatchlist;
      var isWatchlistItem = _this.state.isWatchlistItem;
      var updatedWatchListArray = [];

      if (isWatchlistItem) {
        var tempArray = (0, _toConsumableArray2.default)(watchlistItems);
        var indexFound = -1;
        tempArray.map(function (obj, index) {
          if (obj.id == id) {
            indexFound = index;
          }
        });
        if (indexFound > -1) tempArray.splice(indexFound, 1);
        updatedWatchListArray = tempArray;
      } else {
        updatedWatchListArray = [].concat((0, _toConsumableArray2.default)(watchlistItems), [item]);
      }

      updateWatchlist(updatedWatchListArray);

      _this.setState({
        isWatchlistItem: !_this.state.isWatchlistItem
      });

      _this._notifyMessage(isWatchlistItem ? "Removed from Watchlist" : "Added to Watchlist");
    };

    _this.state = {
      movieData: "",
      isWatchlistItem: false
    };
    return _this;
  }

  (0, _createClass2.default)(MovieDetails, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var id = this.props.navigation.state.params.id;
      var watchlistItems = this.props.watchlistItems;
      var filterData = watchlistItems.filter(function (item) {
        return item.id == id;
      });
      this.setState({
        isWatchlistItem: filterData.length > 0
      });
      this.props.getMovieDetailsAction(id, function (_ref) {
        var data = _ref.data,
            status = _ref.status;

        if (status) {
          console.log("MOVIE DETAIL SCREEN", data);

          _this2.setState({
            movieData: data
          });
        }
      });
    }
  }, {
    key: "_notifyMessage",
    value: function _notifyMessage(msg) {
      if (Platform.OS === "android") {
        _reactNative.ToastAndroid.show(msg, _reactNative.ToastAndroid.SHORT);
      } else {
        alert(msg);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$state = this.state,
          movieData = _this$state.movieData,
          isWatchlistItem = _this$state.isWatchlistItem;
      var isLoading = this.props.isLoading;
      return _react.default.createElement(_reactNative.SafeAreaView, {
        style: _styles.default.safeContainer
      }, _react.default.createElement(_reactNative.ScrollView, {
        showsVerticalScrollIndicator: false
      }, _react.default.createElement(_reactNative.Image, {
        style: _styles.default.posterStyle,
        source: {
          uri: _constants.default.APP_IMG_URL_LARGE + movieData.poster_path
        }
      }), _react.default.createElement(_reactNative.View, {
        style: _styles.default.movieTitleContainer
      }, _react.default.createElement(_reactNative.Image, {
        style: _styles.default.imgStyle,
        source: {
          uri: _constants.default.APP_IMG_URL_LARGE + movieData.poster_path
        }
      }), _react.default.createElement(_reactNative.Text, {
        style: _styles.default.movieTitleTextStyle
      }, movieData.title)), _react.default.createElement(_reactNative.FlatList, {
        style: _styles.default.genreListStyle,
        horizontal: true,
        data: movieData.genres,
        renderItem: function renderItem(_ref2) {
          var item = _ref2.item,
              key = _ref2.key;
          return _react.default.createElement(_reactNative.View, {
            style: [{
              marginLeft: key == 0 ? 20 : 10,
              marginRight: key == movieData.genres.length - 1 ? 20 : 10
            }]
          }, !!item.name && _react.default.createElement(_reactNative.View, {
            style: _styles.default.genreContainer
          }, _react.default.createElement(_reactNative.Text, {
            style: _styles.default.genreTextStyle
          }, item.name)));
        }
      }), _react.default.createElement(_reactNative.View, {
        style: _styles.default.movieTitleContainer
      }, _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.aboutMovieStyle]
      }, "About Movie"), _react.default.createElement(_reactNative.View, {
        style: _styles.default.thinSeparator
      }), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.overviewStyle]
      }, "Overviews:"), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.overviewContentStyle]
      }, movieData.overview), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.releaseStyle]
      }, "Release Date:"), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.releaseContentStyle]
      }, movieData.release_date), _react.default.createElement(_reactNative.View, {
        style: _styles.default.rowStyle
      }, _react.default.createElement(_reactNative.View, {
        style: _styles.default.avgRatingContainer
      }, _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.releaseContentStyle]
      }, "Average Rating:"), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.releaseContentStyle]
      }, movieData.vote_average)), _react.default.createElement(_reactNative.View, {
        style: {
          flex: 1,
          flexDirection: "column",
          marginTop: 12,
          alignItems: "flex-start"
        }
      }, _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, {
          fontSize: 12
        }]
      }, "Rate Count:"), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, {
          fontSize: 12
        }]
      }, movieData.vote_count))), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.releaseStyle]
      }, "Popularity:"), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.releaseContentStyle]
      }, movieData.popularity))), _react.default.createElement(_reactNative.View, {
        style: _styles.default.bottomContainerStyle
      }, _react.default.createElement(_reactNative.View, {
        style: _styles.default.backButtonContainerStyle
      }, _react.default.createElement(_reactNative.TouchableOpacity, {
        style: _styles.default.backButtonContainer,
        onPress: function onPress() {
          return _this3._didTapOnBackButton();
        }
      }, _react.default.createElement(_reactNative.Image, {
        style: _styles.default.backButtonImageStyle,
        source: _images.default.back
      }), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.backTextStyle]
      }, "Back"))), _react.default.createElement(_reactNative.View, {
        style: _styles.default.watchListContainerStyle
      }, _react.default.createElement(_reactNative.TouchableOpacity, {
        style: _styles.default.watchListContainer,
        onPress: function onPress() {
          return _this3._addToWatchList();
        }
      }, _react.default.createElement(_reactNative.Image, {
        style: _styles.default.watchListImageStyle,
        source: isWatchlistItem ? _images.default.watchlist_dark_tick : _images.default.watchlist_dark
      })))), isLoading && _react.default.createElement(_hudView.default, null));
    }
  }]);
  return MovieDetails;
}(_react.Component);

exports.default = MovieDetails;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb3ZpZURldGFpbHMiLCJwcm9wcyIsIl9kaWRUYXBPbkJhY2tCdXR0b24iLCJuYXZpZ2F0aW9uIiwiZ29CYWNrIiwiX2FkZFRvV2F0Y2hMaXN0Iiwic3RhdGUiLCJwYXJhbXMiLCJpdGVtIiwiaWQiLCJ3YXRjaGxpc3RJdGVtcyIsInVwZGF0ZVdhdGNobGlzdCIsImlzV2F0Y2hsaXN0SXRlbSIsInVwZGF0ZWRXYXRjaExpc3RBcnJheSIsInRlbXBBcnJheSIsImluZGV4Rm91bmQiLCJtYXAiLCJvYmoiLCJpbmRleCIsInNwbGljZSIsInNldFN0YXRlIiwiX25vdGlmeU1lc3NhZ2UiLCJtb3ZpZURhdGEiLCJmaWx0ZXJEYXRhIiwiZmlsdGVyIiwibGVuZ3RoIiwiZ2V0TW92aWVEZXRhaWxzQWN0aW9uIiwiZGF0YSIsInN0YXR1cyIsImNvbnNvbGUiLCJsb2ciLCJtc2ciLCJQbGF0Zm9ybSIsIk9TIiwiVG9hc3RBbmRyb2lkIiwic2hvdyIsIlNIT1JUIiwiYWxlcnQiLCJpc0xvYWRpbmciLCJzdHlsZXMiLCJzYWZlQ29udGFpbmVyIiwicG9zdGVyU3R5bGUiLCJ1cmkiLCJDb25zdGFudHMiLCJBUFBfSU1HX1VSTF9MQVJHRSIsInBvc3Rlcl9wYXRoIiwibW92aWVUaXRsZUNvbnRhaW5lciIsImltZ1N0eWxlIiwibW92aWVUaXRsZVRleHRTdHlsZSIsInRpdGxlIiwiZ2VucmVMaXN0U3R5bGUiLCJnZW5yZXMiLCJrZXkiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJuYW1lIiwiZ2VucmVDb250YWluZXIiLCJnZW5yZVRleHRTdHlsZSIsIm1vdmllVGV4dFN0eWxlIiwiYWJvdXRNb3ZpZVN0eWxlIiwidGhpblNlcGFyYXRvciIsIm92ZXJ2aWV3U3R5bGUiLCJvdmVydmlld0NvbnRlbnRTdHlsZSIsIm92ZXJ2aWV3IiwicmVsZWFzZVN0eWxlIiwicmVsZWFzZUNvbnRlbnRTdHlsZSIsInJlbGVhc2VfZGF0ZSIsInJvd1N0eWxlIiwiYXZnUmF0aW5nQ29udGFpbmVyIiwidm90ZV9hdmVyYWdlIiwiZmxleCIsImZsZXhEaXJlY3Rpb24iLCJtYXJnaW5Ub3AiLCJhbGlnbkl0ZW1zIiwiZm9udFNpemUiLCJ2b3RlX2NvdW50IiwicG9wdWxhcml0eSIsImJvdHRvbUNvbnRhaW5lclN0eWxlIiwiYmFja0J1dHRvbkNvbnRhaW5lclN0eWxlIiwiYmFja0J1dHRvbkNvbnRhaW5lciIsImJhY2tCdXR0b25JbWFnZVN0eWxlIiwiSW1hZ2VzIiwiYmFjayIsImJhY2tUZXh0U3R5bGUiLCJ3YXRjaExpc3RDb250YWluZXJTdHlsZSIsIndhdGNoTGlzdENvbnRhaW5lciIsIndhdGNoTGlzdEltYWdlU3R5bGUiLCJ3YXRjaGxpc3RfZGFya190aWNrIiwid2F0Y2hsaXN0X2RhcmsiLCJDb21wb25lbnQiXSwic291cmNlcyI6WyJNb3ZpZURldGFpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIG9uIEp1bHkgMTcsIDIwMjJcbiAqIE1vdmllIERldGFpbHMgc2NyZWVuXG4gKi9cblxuaW1wb3J0IHtcbiAgVmlldyxcbiAgVG91Y2hhYmxlT3BhY2l0eSxcbiAgVGV4dCxcbiAgU2FmZUFyZWFWaWV3LFxuICBGbGF0TGlzdCxcbiAgSW1hZ2UsXG4gIFRvYXN0QW5kcm9pZCxcbn0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gXCIuL3N0eWxlc1wiO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IEltYWdlcyBmcm9tIFwiLi4vLi4vY29uZmlnL2ltYWdlc1wiO1xuaW1wb3J0IENvbnN0YW50cyBmcm9tIFwiLi4vLi4vY29uZmlnL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgU2Nyb2xsVmlldyB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcbmltcG9ydCBIdWRWaWV3IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL2h1ZFZpZXdcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW92aWVEZXRhaWxzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbW92aWVEYXRhOiBcIlwiLFxuICAgICAgaXNXYXRjaGxpc3RJdGVtOiBmYWxzZSxcbiAgICB9O1xuICB9XG5cbiAgLypcbiAgICogRmV0Y2ggbW92aWUgZGV0YWlscyBvbiBwYWdlIGxvYWRcbiAgICovXG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBpZCB9ID0gdGhpcy5wcm9wcy5uYXZpZ2F0aW9uLnN0YXRlLnBhcmFtcztcbiAgICBjb25zdCB7IHdhdGNobGlzdEl0ZW1zIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCBmaWx0ZXJEYXRhID0gd2F0Y2hsaXN0SXRlbXMuZmlsdGVyKChpdGVtKSA9PiBpdGVtLmlkID09IGlkKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoeyBpc1dhdGNobGlzdEl0ZW06IGZpbHRlckRhdGEubGVuZ3RoID4gMCB9KTtcbiAgICB0aGlzLnByb3BzLmdldE1vdmllRGV0YWlsc0FjdGlvbihpZCwgKHsgZGF0YSwgc3RhdHVzIH0pID0+IHtcbiAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJNT1ZJRSBERVRBSUwgU0NSRUVOXCIsIGRhdGEpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBtb3ZpZURhdGE6IGRhdGEsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLypcbiAgICogU2hvd3MgYSB0b2FzdC9hbGVydCBtZXNzYWdlIHdoZW4gbW92aWUgaXMgYWRkZWQvcmVtb3ZlZCBmcm9tIFdhdGNobGlzdFxuICAgKi9cbiAgX25vdGlmeU1lc3NhZ2UobXNnKSB7XG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSBcImFuZHJvaWRcIikge1xuICAgICAgVG9hc3RBbmRyb2lkLnNob3cobXNnLCBUb2FzdEFuZHJvaWQuU0hPUlQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhbGVydChtc2cpO1xuICAgIH1cbiAgfVxuXG4gIC8qXG4gICAqIE5hdmlnYXRlcyB0byBiYWNrXG4gICAqL1xuICBfZGlkVGFwT25CYWNrQnV0dG9uID0gKCkgPT4ge1xuICAgIHRoaXMucHJvcHMubmF2aWdhdGlvbi5nb0JhY2soKTtcbiAgfTtcblxuICAvKlxuICAgKiBBZGQvUmVtb3ZlIG1vdmllIGl0ZW0gdG8gd2F0Y2hsaXN0XG4gICAqIEZldGNoIHdhdGNobGlzdCBkYXRhIGZyb20gcmVkdWNlciBhbmQgbW9kaWZ5IGl0IGFuZCBkaXNwYXRjaCB0byByZWR1Y2VyXG4gICAqL1xuICBfYWRkVG9XYXRjaExpc3QgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBpdGVtLCBpZCB9ID0gdGhpcy5wcm9wcy5uYXZpZ2F0aW9uLnN0YXRlLnBhcmFtcztcbiAgICBjb25zdCB7IHdhdGNobGlzdEl0ZW1zLCB1cGRhdGVXYXRjaGxpc3QgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCB7IGlzV2F0Y2hsaXN0SXRlbSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBsZXQgdXBkYXRlZFdhdGNoTGlzdEFycmF5ID0gW107XG5cbiAgICBpZiAoaXNXYXRjaGxpc3RJdGVtKSB7XG4gICAgICBsZXQgdGVtcEFycmF5ID0gWy4uLndhdGNobGlzdEl0ZW1zXTtcbiAgICAgIGxldCBpbmRleEZvdW5kID0gLTE7XG4gICAgICB0ZW1wQXJyYXkubWFwKChvYmosIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChvYmouaWQgPT0gaWQpIHtcbiAgICAgICAgICBpbmRleEZvdW5kID0gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKGluZGV4Rm91bmQgPiAtMSkgdGVtcEFycmF5LnNwbGljZShpbmRleEZvdW5kLCAxKTtcblxuICAgICAgdXBkYXRlZFdhdGNoTGlzdEFycmF5ID0gdGVtcEFycmF5O1xuICAgIH0gZWxzZSB7XG4gICAgICB1cGRhdGVkV2F0Y2hMaXN0QXJyYXkgPSBbLi4ud2F0Y2hsaXN0SXRlbXMsIC4uLltpdGVtXV07XG4gICAgfVxuXG4gICAgdXBkYXRlV2F0Y2hsaXN0KHVwZGF0ZWRXYXRjaExpc3RBcnJheSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzV2F0Y2hsaXN0SXRlbTogIXRoaXMuc3RhdGUuaXNXYXRjaGxpc3RJdGVtIH0pO1xuICAgIHRoaXMuX25vdGlmeU1lc3NhZ2UoXG4gICAgICBpc1dhdGNobGlzdEl0ZW0gPyBcIlJlbW92ZWQgZnJvbSBXYXRjaGxpc3RcIiA6IFwiQWRkZWQgdG8gV2F0Y2hsaXN0XCJcbiAgICApO1xuICB9O1xuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBtb3ZpZURhdGEsIGlzV2F0Y2hsaXN0SXRlbSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IGlzTG9hZGluZyB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8U2FmZUFyZWFWaWV3IHN0eWxlPXtzdHlsZXMuc2FmZUNvbnRhaW5lcn0+XG4gICAgICAgIDxTY3JvbGxWaWV3IHNob3dzVmVydGljYWxTY3JvbGxJbmRpY2F0b3I9e2ZhbHNlfT5cbiAgICAgICAgICA8SW1hZ2VcbiAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMucG9zdGVyU3R5bGV9XG4gICAgICAgICAgICBzb3VyY2U9e3tcbiAgICAgICAgICAgICAgdXJpOiBDb25zdGFudHMuQVBQX0lNR19VUkxfTEFSR0UgKyBtb3ZpZURhdGEucG9zdGVyX3BhdGgsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID48L0ltYWdlPlxuXG4gICAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5tb3ZpZVRpdGxlQ29udGFpbmVyfT5cbiAgICAgICAgICAgIDxJbWFnZVxuICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLmltZ1N0eWxlfVxuICAgICAgICAgICAgICBzb3VyY2U9e3tcbiAgICAgICAgICAgICAgICB1cmk6IENvbnN0YW50cy5BUFBfSU1HX1VSTF9MQVJHRSArIG1vdmllRGF0YS5wb3N0ZXJfcGF0aCxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID48L0ltYWdlPlxuXG4gICAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLm1vdmllVGl0bGVUZXh0U3R5bGV9Pnttb3ZpZURhdGEudGl0bGV9PC9UZXh0PlxuICAgICAgICAgIDwvVmlldz5cblxuICAgICAgICAgIDxGbGF0TGlzdFxuICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5nZW5yZUxpc3RTdHlsZX1cbiAgICAgICAgICAgIGhvcml6b250YWw9e3RydWV9XG4gICAgICAgICAgICBkYXRhPXttb3ZpZURhdGEuZ2VucmVzfVxuICAgICAgICAgICAgcmVuZGVySXRlbT17KHsgaXRlbSwga2V5IH0pID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8Vmlld1xuICAgICAgICAgICAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IGtleSA9PSAwID8gMjAgOiAxMCxcbiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDoga2V5ID09IG1vdmllRGF0YS5nZW5yZXMubGVuZ3RoIC0gMSA/IDIwIDogMTAsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHshIWl0ZW0ubmFtZSAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuZ2VucmVDb250YWluZXJ9PlxuICAgICAgICAgICAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuZ2VucmVUZXh0U3R5bGV9PntpdGVtLm5hbWV9PC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cblxuICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMubW92aWVUaXRsZUNvbnRhaW5lcn0+XG4gICAgICAgICAgICA8VGV4dCBzdHlsZT17W3N0eWxlcy5tb3ZpZVRleHRTdHlsZSwgc3R5bGVzLmFib3V0TW92aWVTdHlsZV19PlxuICAgICAgICAgICAgICB7XCJBYm91dCBNb3ZpZVwifVxuICAgICAgICAgICAgPC9UZXh0PlxuXG4gICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLnRoaW5TZXBhcmF0b3J9IC8+XG5cbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtbc3R5bGVzLm1vdmllVGV4dFN0eWxlLCBzdHlsZXMub3ZlcnZpZXdTdHlsZV19PlxuICAgICAgICAgICAgICB7XCJPdmVydmlld3M6XCJ9XG4gICAgICAgICAgICA8L1RleHQ+XG5cbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtbc3R5bGVzLm1vdmllVGV4dFN0eWxlLCBzdHlsZXMub3ZlcnZpZXdDb250ZW50U3R5bGVdfT5cbiAgICAgICAgICAgICAge21vdmllRGF0YS5vdmVydmlld31cbiAgICAgICAgICAgIDwvVGV4dD5cblxuICAgICAgICAgICAgPFRleHQgc3R5bGU9e1tzdHlsZXMubW92aWVUZXh0U3R5bGUsIHN0eWxlcy5yZWxlYXNlU3R5bGVdfT5cbiAgICAgICAgICAgICAge1wiUmVsZWFzZSBEYXRlOlwifVxuICAgICAgICAgICAgPC9UZXh0PlxuXG4gICAgICAgICAgICA8VGV4dCBzdHlsZT17W3N0eWxlcy5tb3ZpZVRleHRTdHlsZSwgc3R5bGVzLnJlbGVhc2VDb250ZW50U3R5bGVdfT5cbiAgICAgICAgICAgICAge21vdmllRGF0YS5yZWxlYXNlX2RhdGV9XG4gICAgICAgICAgICA8L1RleHQ+XG5cbiAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMucm93U3R5bGV9PlxuICAgICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmF2Z1JhdGluZ0NvbnRhaW5lcn0+XG4gICAgICAgICAgICAgICAgPFRleHRcbiAgICAgICAgICAgICAgICAgIHN0eWxlPXtbc3R5bGVzLm1vdmllVGV4dFN0eWxlLCBzdHlsZXMucmVsZWFzZUNvbnRlbnRTdHlsZV19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge1wiQXZlcmFnZSBSYXRpbmc6XCJ9XG4gICAgICAgICAgICAgICAgPC9UZXh0PlxuXG4gICAgICAgICAgICAgICAgPFRleHRcbiAgICAgICAgICAgICAgICAgIHN0eWxlPXtbc3R5bGVzLm1vdmllVGV4dFN0eWxlLCBzdHlsZXMucmVsZWFzZUNvbnRlbnRTdHlsZV19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge21vdmllRGF0YS52b3RlX2F2ZXJhZ2V9XG4gICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICA8L1ZpZXc+XG5cbiAgICAgICAgICAgICAgPFZpZXdcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IDEyLFxuICAgICAgICAgICAgICAgICAgYWxpZ25JdGVtczogXCJmbGV4LXN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtbc3R5bGVzLm1vdmllVGV4dFN0eWxlLCB7IGZvbnRTaXplOiAxMiB9XX0+XG4gICAgICAgICAgICAgICAgICB7XCJSYXRlIENvdW50OlwifVxuICAgICAgICAgICAgICAgIDwvVGV4dD5cblxuICAgICAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtbc3R5bGVzLm1vdmllVGV4dFN0eWxlLCB7IGZvbnRTaXplOiAxMiB9XX0+XG4gICAgICAgICAgICAgICAgICB7bW92aWVEYXRhLnZvdGVfY291bnR9XG4gICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgICAgICA8L1ZpZXc+XG5cbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtbc3R5bGVzLm1vdmllVGV4dFN0eWxlLCBzdHlsZXMucmVsZWFzZVN0eWxlXX0+XG4gICAgICAgICAgICAgIHtcIlBvcHVsYXJpdHk6XCJ9XG4gICAgICAgICAgICA8L1RleHQ+XG5cbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtbc3R5bGVzLm1vdmllVGV4dFN0eWxlLCBzdHlsZXMucmVsZWFzZUNvbnRlbnRTdHlsZV19PlxuICAgICAgICAgICAgICB7bW92aWVEYXRhLnBvcHVsYXJpdHl9XG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgPC9WaWV3PlxuICAgICAgICA8L1Njcm9sbFZpZXc+XG5cbiAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5ib3R0b21Db250YWluZXJTdHlsZX0+XG4gICAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5iYWNrQnV0dG9uQ29udGFpbmVyU3R5bGV9PlxuICAgICAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHlcbiAgICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5iYWNrQnV0dG9uQ29udGFpbmVyfVxuICAgICAgICAgICAgICBvblByZXNzPXsoKSA9PiB0aGlzLl9kaWRUYXBPbkJhY2tCdXR0b24oKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPEltYWdlXG4gICAgICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5iYWNrQnV0dG9uSW1hZ2VTdHlsZX1cbiAgICAgICAgICAgICAgICBzb3VyY2U9e0ltYWdlcy5iYWNrfVxuICAgICAgICAgICAgICA+PC9JbWFnZT5cblxuICAgICAgICAgICAgICA8VGV4dCBzdHlsZT17W3N0eWxlcy5tb3ZpZVRleHRTdHlsZSwgc3R5bGVzLmJhY2tUZXh0U3R5bGVdfT5cbiAgICAgICAgICAgICAgICB7XCJCYWNrXCJ9XG4gICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgICAgICA8L1ZpZXc+XG5cbiAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLndhdGNoTGlzdENvbnRhaW5lclN0eWxlfT5cbiAgICAgICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XG4gICAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMud2F0Y2hMaXN0Q29udGFpbmVyfVxuICAgICAgICAgICAgICBvblByZXNzPXsoKSA9PiB0aGlzLl9hZGRUb1dhdGNoTGlzdCgpfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8SW1hZ2VcbiAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLndhdGNoTGlzdEltYWdlU3R5bGV9XG4gICAgICAgICAgICAgICAgc291cmNlPXtcbiAgICAgICAgICAgICAgICAgIGlzV2F0Y2hsaXN0SXRlbVxuICAgICAgICAgICAgICAgICAgICA/IEltYWdlcy53YXRjaGxpc3RfZGFya190aWNrXG4gICAgICAgICAgICAgICAgICAgIDogSW1hZ2VzLndhdGNobGlzdF9kYXJrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA+PC9JbWFnZT5cbiAgICAgICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgIDwvVmlldz5cbiAgICAgICAge2lzTG9hZGluZyAmJiA8SHVkVmlldyAvPn1cbiAgICAgIDwvU2FmZUFyZWFWaWV3PlxuICAgICk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtBOztBQVVBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOzs7Ozs7Ozs7O0lBRXFCQSxZOzs7OztFQUNuQixzQkFBWUMsS0FBWixFQUFtQjtJQUFBOztJQUFBO0lBQ2pCLDBCQUFNQSxLQUFOOztJQURpQixNQTJDbkJDLG1CQTNDbUIsR0EyQ0csWUFB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