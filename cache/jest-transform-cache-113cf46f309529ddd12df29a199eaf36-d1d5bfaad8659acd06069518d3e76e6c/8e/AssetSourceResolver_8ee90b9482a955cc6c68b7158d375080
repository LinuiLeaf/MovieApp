4c9413f0e668e61787736d31fb8db7d9
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var PixelRatio = require('../Utilities/PixelRatio');

var _require = require('./AssetUtils'),
    pickScale = _require.pickScale;

var Platform = require('../Utilities/Platform');

var invariant = require('invariant');

var _require2 = require('@react-native/assets/path-support'),
    getAndroidResourceFolderName = _require2.getAndroidResourceFolderName,
    getAndroidResourceIdentifier = _require2.getAndroidResourceIdentifier,
    getBasePath = _require2.getBasePath;

function getScaledAssetPath(asset) {
  var scale = pickScale(asset.scales, PixelRatio.get());
  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
  var assetDir = getBasePath(asset);
  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}

function getAssetPathInDrawableFolder(asset) {
  var scale = pickScale(asset.scales, PixelRatio.get());
  var drawbleFolder = getAndroidResourceFolderName(asset, scale);
  var fileName = getAndroidResourceIdentifier(asset);
  return drawbleFolder + '/' + fileName + '.' + asset.type;
}

var AssetSourceResolver = function () {
  function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
    (0, _classCallCheck2.default)(this, AssetSourceResolver);
    this.serverUrl = serverUrl;
    this.jsbundleUrl = jsbundleUrl;
    this.asset = asset;
  }

  (0, _createClass2.default)(AssetSourceResolver, [{
    key: "isLoadedFromServer",
    value: function isLoadedFromServer() {
      return !!this.serverUrl;
    }
  }, {
    key: "isLoadedFromFileSystem",
    value: function isLoadedFromFileSystem() {
      return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
    }
  }, {
    key: "defaultAsset",
    value: function defaultAsset() {
      if (this.isLoadedFromServer()) {
        return this.assetServerURL();
      }

      if (Platform.OS === 'android') {
        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
      } else {
        return this.scaledAssetURLNearBundle();
      }
    }
  }, {
    key: "assetServerURL",
    value: function assetServerURL() {
      invariant(!!this.serverUrl, 'need server to load from');
      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
    }
  }, {
    key: "scaledAssetPath",
    value: function scaledAssetPath() {
      return this.fromSource(getScaledAssetPath(this.asset));
    }
  }, {
    key: "scaledAssetURLNearBundle",
    value: function scaledAssetURLNearBundle() {
      var path = this.jsbundleUrl || 'file://';
      return this.fromSource(path + getScaledAssetPath(this.asset).replace(/\.\.\//g, '_'));
    }
  }, {
    key: "resourceIdentifierWithoutScale",
    value: function resourceIdentifierWithoutScale() {
      invariant(Platform.OS === 'android', 'resource identifiers work on Android');
      return this.fromSource(getAndroidResourceIdentifier(this.asset));
    }
  }, {
    key: "drawableFolderInBundle",
    value: function drawableFolderInBundle() {
      var path = this.jsbundleUrl || 'file://';
      return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
    }
  }, {
    key: "fromSource",
    value: function fromSource(source) {
      return {
        __packager_asset: true,
        width: this.asset.width,
        height: this.asset.height,
        uri: source,
        scale: pickScale(this.asset.scales, PixelRatio.get())
      };
    }
  }]);
  return AssetSourceResolver;
}();

AssetSourceResolver.pickScale = pickScale;
module.exports = AssetSourceResolver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaXhlbFJhdGlvIiwicmVxdWlyZSIsInBpY2tTY2FsZSIsIlBsYXRmb3JtIiwiaW52YXJpYW50IiwiZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZSIsImdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIiLCJnZXRCYXNlUGF0aCIsImdldFNjYWxlZEFzc2V0UGF0aCIsImFzc2V0Iiwic2NhbGUiLCJzY2FsZXMiLCJnZXQiLCJzY2FsZVN1ZmZpeCIsImFzc2V0RGlyIiwibmFtZSIsInR5cGUiLCJnZXRBc3NldFBhdGhJbkRyYXdhYmxlRm9sZGVyIiwiZHJhd2JsZUZvbGRlciIsImZpbGVOYW1lIiwiQXNzZXRTb3VyY2VSZXNvbHZlciIsInNlcnZlclVybCIsImpzYnVuZGxlVXJsIiwic3RhcnRzV2l0aCIsImlzTG9hZGVkRnJvbVNlcnZlciIsImFzc2V0U2VydmVyVVJMIiwiT1MiLCJpc0xvYWRlZEZyb21GaWxlU3lzdGVtIiwiZHJhd2FibGVGb2xkZXJJbkJ1bmRsZSIsInJlc291cmNlSWRlbnRpZmllcldpdGhvdXRTY2FsZSIsInNjYWxlZEFzc2V0VVJMTmVhckJ1bmRsZSIsImZyb21Tb3VyY2UiLCJoYXNoIiwicGF0aCIsInJlcGxhY2UiLCJzb3VyY2UiLCJfX3BhY2thZ2VyX2Fzc2V0Iiwid2lkdGgiLCJoZWlnaHQiLCJ1cmkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQXNzZXRTb3VyY2VSZXNvbHZlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgdHlwZSBSZXNvbHZlZEFzc2V0U291cmNlID0ge3xcbiAgK19fcGFja2FnZXJfYXNzZXQ6IGJvb2xlYW4sXG4gICt3aWR0aDogP251bWJlcixcbiAgK2hlaWdodDogP251bWJlcixcbiAgK3VyaTogc3RyaW5nLFxuICArc2NhbGU6IG51bWJlcixcbnx9O1xuXG5pbXBvcnQgdHlwZSB7UGFja2FnZXJBc3NldH0gZnJvbSAnQHJlYWN0LW5hdGl2ZS9hc3NldHMvcmVnaXN0cnknO1xuXG5jb25zdCBQaXhlbFJhdGlvID0gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL1BpeGVsUmF0aW8nKTtcbmNvbnN0IHtwaWNrU2NhbGV9ID0gcmVxdWlyZSgnLi9Bc3NldFV0aWxzJyk7XG5jb25zdCBQbGF0Zm9ybSA9IHJlcXVpcmUoJy4uL1V0aWxpdGllcy9QbGF0Zm9ybScpO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuY29uc3Qge1xuICBnZXRBbmRyb2lkUmVzb3VyY2VGb2xkZXJOYW1lLFxuICBnZXRBbmRyb2lkUmVzb3VyY2VJZGVudGlmaWVyLFxuICBnZXRCYXNlUGF0aCxcbn0gPSByZXF1aXJlKCdAcmVhY3QtbmF0aXZlL2Fzc2V0cy9wYXRoLXN1cHBvcnQnKTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgcGF0aCBsaWtlICdhc3NldHMvQXdlc29tZU1vZHVsZS9pY29uQDJ4LnBuZydcbiAqL1xuZnVuY3Rpb24gZ2V0U2NhbGVkQXNzZXRQYXRoKGFzc2V0KTogc3RyaW5nIHtcbiAgY29uc3Qgc2NhbGUgPSBwaWNrU2NhbGUoYXNzZXQuc2NhbGVzLCBQaXhlbFJhdGlvLmdldCgpKTtcbiAgY29uc3Qgc2NhbGVTdWZmaXggPSBzY2FsZSA9PT0gMSA/ICcnIDogJ0AnICsgc2NhbGUgKyAneCc7XG4gIGNvbnN0IGFzc2V0RGlyID0gZ2V0QmFzZVBhdGgoYXNzZXQpO1xuICByZXR1cm4gYXNzZXREaXIgKyAnLycgKyBhc3NldC5uYW1lICsgc2NhbGVTdWZmaXggKyAnLicgKyBhc3NldC50eXBlO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBwYXRoIGxpa2UgJ2RyYXdhYmxlLW1kcGkvaWNvbi5wbmcnXG4gKi9cbmZ1bmN0aW9uIGdldEFzc2V0UGF0aEluRHJhd2FibGVGb2xkZXIoYXNzZXQpOiBzdHJpbmcge1xuICBjb25zdCBzY2FsZSA9IHBpY2tTY2FsZShhc3NldC5zY2FsZXMsIFBpeGVsUmF0aW8uZ2V0KCkpO1xuICBjb25zdCBkcmF3YmxlRm9sZGVyID0gZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZShhc3NldCwgc2NhbGUpO1xuICBjb25zdCBmaWxlTmFtZSA9IGdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIoYXNzZXQpO1xuICByZXR1cm4gZHJhd2JsZUZvbGRlciArICcvJyArIGZpbGVOYW1lICsgJy4nICsgYXNzZXQudHlwZTtcbn1cblxuY2xhc3MgQXNzZXRTb3VyY2VSZXNvbHZlciB7XG4gIHNlcnZlclVybDogP3N0cmluZztcbiAgLy8gd2hlcmUgdGhlIGpzYnVuZGxlIGlzIGJlaW5nIHJ1biBmcm9tXG4gIGpzYnVuZGxlVXJsOiA/c3RyaW5nO1xuICAvLyB0aGUgYXNzZXQgdG8gcmVzb2x2ZVxuICBhc3NldDogUGFja2FnZXJBc3NldDtcblxuICBjb25zdHJ1Y3RvcihzZXJ2ZXJVcmw6ID9zdHJpbmcsIGpzYnVuZGxlVXJsOiA/c3RyaW5nLCBhc3NldDogUGFja2FnZXJBc3NldCkge1xuICAgIHRoaXMuc2VydmVyVXJsID0gc2VydmVyVXJsO1xuICAgIHRoaXMuanNidW5kbGVVcmwgPSBqc2J1bmRsZVVybDtcbiAgICB0aGlzLmFzc2V0ID0gYXNzZXQ7XG4gIH1cblxuICBpc0xvYWRlZEZyb21TZXJ2ZXIoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5zZXJ2ZXJVcmw7XG4gIH1cblxuICBpc0xvYWRlZEZyb21GaWxlU3lzdGVtKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhISh0aGlzLmpzYnVuZGxlVXJsICYmIHRoaXMuanNidW5kbGVVcmwuc3RhcnRzV2l0aCgnZmlsZTovLycpKTtcbiAgfVxuXG4gIGRlZmF1bHRBc3NldCgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICBpZiAodGhpcy5pc0xvYWRlZEZyb21TZXJ2ZXIoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXNzZXRTZXJ2ZXJVUkwoKTtcbiAgICB9XG5cbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgcmV0dXJuIHRoaXMuaXNMb2FkZWRGcm9tRmlsZVN5c3RlbSgpXG4gICAgICAgID8gdGhpcy5kcmF3YWJsZUZvbGRlckluQnVuZGxlKClcbiAgICAgICAgOiB0aGlzLnJlc291cmNlSWRlbnRpZmllcldpdGhvdXRTY2FsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zY2FsZWRBc3NldFVSTE5lYXJCdW5kbGUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhYnNvbHV0ZSBVUkwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZmV0Y2ggdGhlIGFzc2V0XG4gICAqIGZyb20gdGhlIGRldnNlcnZlclxuICAgKi9cbiAgYXNzZXRTZXJ2ZXJVUkwoKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgaW52YXJpYW50KCEhdGhpcy5zZXJ2ZXJVcmwsICduZWVkIHNlcnZlciB0byBsb2FkIGZyb20nKTtcbiAgICByZXR1cm4gdGhpcy5mcm9tU291cmNlKFxuICAgICAgdGhpcy5zZXJ2ZXJVcmwgK1xuICAgICAgICBnZXRTY2FsZWRBc3NldFBhdGgodGhpcy5hc3NldCkgK1xuICAgICAgICAnP3BsYXRmb3JtPScgK1xuICAgICAgICBQbGF0Zm9ybS5PUyArXG4gICAgICAgICcmaGFzaD0nICtcbiAgICAgICAgdGhpcy5hc3NldC5oYXNoLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZXMgdG8ganVzdCB0aGUgc2NhbGVkIGFzc2V0IGZpbGVuYW1lXG4gICAqIEUuZy4gJ2Fzc2V0cy9Bd2Vzb21lTW9kdWxlL2ljb25AMngucG5nJ1xuICAgKi9cbiAgc2NhbGVkQXNzZXRQYXRoKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIHJldHVybiB0aGlzLmZyb21Tb3VyY2UoZ2V0U2NhbGVkQXNzZXRQYXRoKHRoaXMuYXNzZXQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyB0byB3aGVyZSB0aGUgYnVuZGxlIGlzIHJ1bm5pbmcgZnJvbSwgd2l0aCBhIHNjYWxlZCBhc3NldCBmaWxlbmFtZVxuICAgKiBFLmcuICdmaWxlOi8vL3NkY2FyZC9idW5kbGUvYXNzZXRzL0F3ZXNvbWVNb2R1bGUvaWNvbkAyeC5wbmcnXG4gICAqL1xuICBzY2FsZWRBc3NldFVSTE5lYXJCdW5kbGUoKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuanNidW5kbGVVcmwgfHwgJ2ZpbGU6Ly8nO1xuICAgIHJldHVybiB0aGlzLmZyb21Tb3VyY2UoXG4gICAgICAvLyBBc3NldHMgY2FuIGhhdmUgcmVsYXRpdmUgcGF0aHMgb3V0c2lkZSBvZiB0aGUgcHJvamVjdCByb290LlxuICAgICAgLy8gV2hlbiBidW5kbGluZyB0aGVtIHdlIHJlcGxhY2UgYC4uL2Agd2l0aCBgX2AgdG8gbWFrZSBzdXJlIHRoZXlcbiAgICAgIC8vIGRvbid0IGVuZCB1cCBvdXRzaWRlIG9mIHRoZSBleHBlY3RlZCBhc3NldHMgZGlyZWN0b3J5LlxuICAgICAgcGF0aCArIGdldFNjYWxlZEFzc2V0UGF0aCh0aGlzLmFzc2V0KS5yZXBsYWNlKC9cXC5cXC5cXC8vZywgJ18nKSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGxvY2F0aW9uIG9mIGFzc2V0cyBidW5kbGVkIHdpdGggdGhlIGFwcCwgbG9jYXRlZCBieVxuICAgKiByZXNvdXJjZSBpZGVudGlmaWVyXG4gICAqIFRoZSBBbmRyb2lkIHJlc291cmNlIHN5c3RlbSBwaWNrcyB0aGUgY29ycmVjdCBzY2FsZS5cbiAgICogRS5nLiAnYXNzZXRzX2F3ZXNvbWVtb2R1bGVfaWNvbidcbiAgICovXG4gIHJlc291cmNlSWRlbnRpZmllcldpdGhvdXRTY2FsZSgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnLFxuICAgICAgJ3Jlc291cmNlIGlkZW50aWZpZXJzIHdvcmsgb24gQW5kcm9pZCcsXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcy5mcm9tU291cmNlKGdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIodGhpcy5hc3NldCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIElmIHRoZSBqc2J1bmRsZSBpcyBydW5uaW5nIGZyb20gYSBzaWRlbG9hZCBsb2NhdGlvbiwgdGhpcyByZXNvbHZlcyBhc3NldHNcbiAgICogcmVsYXRpdmUgdG8gaXRzIGxvY2F0aW9uXG4gICAqIEUuZy4gJ2ZpbGU6Ly8vc2RjYXJkL0F3ZXNvbWVNb2R1bGUvZHJhd2FibGUtbWRwaS9pY29uLnBuZydcbiAgICovXG4gIGRyYXdhYmxlRm9sZGVySW5CdW5kbGUoKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuanNidW5kbGVVcmwgfHwgJ2ZpbGU6Ly8nO1xuICAgIHJldHVybiB0aGlzLmZyb21Tb3VyY2UocGF0aCArIGdldEFzc2V0UGF0aEluRHJhd2FibGVGb2xkZXIodGhpcy5hc3NldCkpO1xuICB9XG5cbiAgZnJvbVNvdXJjZShzb3VyY2U6IHN0cmluZyk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIHJldHVybiB7XG4gICAgICBfX3BhY2thZ2VyX2Fzc2V0OiB0cnVlLFxuICAgICAgd2lkdGg6IHRoaXMuYXNzZXQud2lkdGgsXG4gICAgICBoZWlnaHQ6IHRoaXMuYXNzZXQuaGVpZ2h0LFxuICAgICAgdXJpOiBzb3VyY2UsXG4gICAgICBzY2FsZTogcGlja1NjYWxlKHRoaXMuYXNzZXQuc2NhbGVzLCBQaXhlbFJhdGlvLmdldCgpKSxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIHBpY2tTY2FsZTogKFxuICAgIHNjYWxlczogQXJyYXk8bnVtYmVyPixcbiAgICBkZXZpY2VTY2FsZT86IG51bWJlcixcbiAgKSA9PiBudW1iZXIgPSBwaWNrU2NhbGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXNzZXRTb3VyY2VSZXNvbHZlcjtcbiJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7Ozs7O0FBWUEsSUFBTUEsVUFBVSxHQUFHQyxPQUFPLENBQUMseUJBQUQsQ0FBMUI7O0FBQ0EsZUFBb0JBLE9BQU8sQ0FBQyxjQUFELENBQTNCO0FBQUEsSUFBT0MsU0FBUCxZQUFPQSxTQUFQOztBQUNBLElBQU1DLFFBQVEsR0FBR0YsT0FBTyxDQUFDLHVCQUFELENBQXhCOztBQUVBLElBQU1HLFNBQVMsR0FBR0gsT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0FBRUEsZ0JBSUlBLE9BQU8sQ0FBQyxtQ0FBRCxDQUpYO0FBQUEsSUFDRUksNEJBREYsYUFDRUEsNEJBREY7QUFBQSxJQUVFQyw0QkFGRixhQUVFQSw0QkFGRjtBQUFBLElBR0VDLFdBSEYsYUFHRUEsV0FIRjs7QUFTQSxTQUFTQyxrQkFBVCxDQUE0QkMsS0FBNUIsRUFBMkM7RUFDekMsSUFBTUMsS0FBSyxHQUFHUixTQUFTLENBQUNPLEtBQUssQ0FBQ0UsTUFBUCxFQUFlWCxVQUFVLENBQUNZLEdBQVgsRUFBZixDQUF2QjtFQUNBLElBQU1DLFdBQVcsR0FBR0gsS0FBSyxLQUFLLENBQVYsR0FBYyxFQUFkLEdBQW1CLE1BQU1BLEtBQU4sR0FBYyxHQUFyRDtFQUNBLElBQU1JLFFBQVEsR0FBR1AsV0FBVyxDQUFDRSxLQUFELENBQTVCO0VBQ0EsT0FBT0ssUUFBUSxHQUFHLEdBQVgsR0FBaUJMLEtBQUssQ0FBQ00sSUFBdkIsR0FBOEJGLFdBQTlCLEdBQTRDLEdBQTVDLEdBQWtESixLQUFLLENBQUNPLElBQS9EO0FBQ0Q7O0FBS0QsU0FBU0MsNEJBQVQsQ0FBc0NS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