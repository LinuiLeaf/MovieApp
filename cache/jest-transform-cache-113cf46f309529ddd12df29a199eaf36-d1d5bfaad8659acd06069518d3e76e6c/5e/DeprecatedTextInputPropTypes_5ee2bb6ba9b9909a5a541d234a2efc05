3efb836b4d25e6a90ab485ca58c5722a
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var DeprecatedColorPropType = require('./DeprecatedColorPropType');

var DeprecatedTextPropTypes = require('./DeprecatedTextPropTypes');

var DeprecatedViewPropTypes = require('./DeprecatedViewPropTypes');

var PropTypes = require('prop-types');

var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];
module.exports = (0, _extends2.default)({}, DeprecatedViewPropTypes, {
  autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),
  autoComplete: PropTypes.oneOf(['cc-csc', 'cc-exp', 'cc-exp-month', 'cc-exp-year', 'cc-number', 'email', 'name', 'password', 'postal-code', 'street-address', 'tel', 'username', 'off']),
  autoCorrect: PropTypes.bool,
  spellCheck: PropTypes.bool,
  autoFocus: PropTypes.bool,
  allowFontScaling: PropTypes.bool,
  maxFontSizeMultiplier: PropTypes.number,
  editable: PropTypes.bool,
  keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'number-pad', 'url', 'ascii-capable', 'numbers-and-punctuation', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search', 'ascii-capable-number-pad', 'visible-password']),
  keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),
  returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),
  returnKeyLabel: PropTypes.string,
  maxLength: PropTypes.number,
  numberOfLines: PropTypes.number,
  disableFullscreenUI: PropTypes.bool,
  enablesReturnKeyAutomatically: PropTypes.bool,
  multiline: PropTypes.bool,
  textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
  onBlur: PropTypes.func,
  onFocus: PropTypes.func,
  onChange: PropTypes.func,
  onChangeText: PropTypes.func,
  onContentSizeChange: PropTypes.func,
  onTextInput: PropTypes.func,
  onEndEditing: PropTypes.func,
  onSelectionChange: PropTypes.func,
  onSubmitEditing: PropTypes.func,
  onKeyPress: PropTypes.func,
  onLayout: PropTypes.func,
  onScroll: PropTypes.func,
  placeholder: PropTypes.string,
  placeholderTextColor: DeprecatedColorPropType,
  scrollEnabled: PropTypes.bool,
  secureTextEntry: PropTypes.bool,
  selectionColor: DeprecatedColorPropType,
  selection: PropTypes.shape({
    start: PropTypes.number.isRequired,
    end: PropTypes.number
  }),
  value: PropTypes.string,
  defaultValue: PropTypes.string,
  clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),
  clearTextOnFocus: PropTypes.bool,
  selectTextOnFocus: PropTypes.bool,
  blurOnSubmit: PropTypes.bool,
  style: DeprecatedTextPropTypes.style,
  underlineColorAndroid: DeprecatedColorPropType,
  inlineImageLeft: PropTypes.string,
  inlineImagePadding: PropTypes.number,
  rejectResponderTermination: PropTypes.bool,
  dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),
  caretHidden: PropTypes.bool,
  contextMenuHidden: PropTypes.bool,
  inputAccessoryViewID: PropTypes.string,
  textContentType: PropTypes.oneOf(['none', 'URL', 'addressCity', 'addressCityAndState', 'addressState', 'countryName', 'creditCardNumber', 'emailAddress', 'familyName', 'fullStreetAddress', 'givenName', 'jobTitle', 'location', 'middleName', 'name', 'namePrefix', 'nameSuffix', 'nickname', 'organizationName', 'postalCode', 'streetAddressLine1', 'streetAddressLine2', 'sublocality', 'telephoneNumber', 'username', 'password', 'newPassword', 'oneTimeCode']),
  showSoftInputOnFocus: PropTypes.bool
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,