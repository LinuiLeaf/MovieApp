bc952f029f66255328af00e07ee47237
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStringifySafeWithLimits = createStringifySafeWithLimits;
exports.default = void 0;

var _invariant = _interopRequireDefault(require("invariant"));

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function createStringifySafeWithLimits(limits) {
  var _limits$maxDepth = limits.maxDepth,
      maxDepth = _limits$maxDepth === void 0 ? Number.POSITIVE_INFINITY : _limits$maxDepth,
      _limits$maxStringLimi = limits.maxStringLimit,
      maxStringLimit = _limits$maxStringLimi === void 0 ? Number.POSITIVE_INFINITY : _limits$maxStringLimi,
      _limits$maxArrayLimit = limits.maxArrayLimit,
      maxArrayLimit = _limits$maxArrayLimit === void 0 ? Number.POSITIVE_INFINITY : _limits$maxArrayLimit,
      _limits$maxObjectKeys = limits.maxObjectKeysLimit,
      maxObjectKeysLimit = _limits$maxObjectKeys === void 0 ? Number.POSITIVE_INFINITY : _limits$maxObjectKeys;
  var stack = [];

  function replacer(key, value) {
    while (stack.length && this !== stack[0]) {
      stack.shift();
    }

    if (typeof value === 'string') {
      var truncatedString = '...(truncated)...';

      if (value.length > maxStringLimit + truncatedString.length) {
        return value.substring(0, maxStringLimit) + truncatedString;
      }

      return value;
    }

    if (typeof value !== 'object' || value === null) {
      return value;
    }

    var retval = value;

    if (Array.isArray(value)) {
      if (stack.length >= maxDepth) {
        retval = "[ ... array with " + value.length + " values ... ]";
      } else if (value.length > maxArrayLimit) {
        retval = value.slice(0, maxArrayLimit).concat(["... extra " + (value.length - maxArrayLimit) + " values truncated ..."]);
      }
    } else {
      (0, _invariant.default)(typeof value === 'object', 'This was already found earlier');
      var keys = Object.keys(value);

      if (stack.length >= maxDepth) {
        retval = "{ ... object with " + keys.length + " keys ... }";
      } else if (keys.length > maxObjectKeysLimit) {
        retval = {};

        for (var _iterator = _createForOfIteratorHelperLoose(keys.slice(0, maxObjectKeysLimit)), _step; !(_step = _iterator()).done;) {
          var k = _step.value;
          retval[k] = value[k];
        }

        var truncatedKey = '...(truncated keys)...';
        retval[truncatedKey] = keys.length - maxObjectKeysLimit;
      }
    }

    stack.unshift(retval);
    return retval;
  }

  return function stringifySafe(arg) {
    if (arg === undefined) {
      return 'undefined';
    } else if (arg === null) {
      return 'null';
    } else if (typeof arg === 'function') {
      try {
        return arg.toString();
      } catch (e) {
        return '[function unknown]';
      }
    } else if (arg instanceof Error) {
      return arg.name + ': ' + arg.message;
    } else {
      try {
        var ret = JSON.stringify(arg, replacer);

        if (ret === undefined) {
          return '["' + typeof arg + '" failed to stringify]';
        }

        return ret;
      } catch (e) {
        if (typeof arg.toString === 'function') {
          try {
            return arg.toString();
          } catch (E) {}
        }
      }
    }

    return '["' + typeof arg + '" failed to stringify]';
  };
}

var stringifySafe = createStringifySafeWithLimits({
  maxDepth: 10,
  maxStringLimit: 100,
  maxArrayLimit: 50,
  maxObjectKeysLimit: 50
});
var _default = stringifySafe;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVTdHJpbmdpZnlTYWZlV2l0aExpbWl0cyIsImxpbWl0cyIsIm1heERlcHRoIiwiTnVtYmVyIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJtYXhTdHJpbmdMaW1pdCIsIm1heEFycmF5TGltaXQiLCJtYXhPYmplY3RLZXlzTGltaXQiLCJzdGFjayIsInJlcGxhY2VyIiwia2V5IiwidmFsdWUiLCJsZW5ndGgiLCJzaGlmdCIsInRydW5jYXRlZFN0cmluZyIsInN1YnN0cmluZyIsInJldHZhbCIsIkFycmF5IiwiaXNBcnJheSIsInNsaWNlIiwiY29uY2F0IiwiaW52YXJpYW50Iiwia2V5cyIsIk9iamVjdCIsImsiLCJ0cnVuY2F0ZWRLZXkiLCJ1bnNoaWZ0Iiwic3RyaW5naWZ5U2FmZSIsImFyZyIsInVuZGVmaW5lZCIsInRvU3RyaW5nIiwiZSIsIkVycm9yIiwibmFtZSIsIm1lc3NhZ2UiLCJyZXQiLCJKU09OIiwic3RyaW5naWZ5IiwiRSJdLCJzb3VyY2VzIjpbInN0cmluZ2lmeVNhZmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3RcbiAqL1xuXG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbi8qKlxuICogVHJpZXMgdG8gc3RyaW5naWZ5IHdpdGggSlNPTi5zdHJpbmdpZnkgYW5kIHRvU3RyaW5nLCBidXQgY2F0Y2hlcyBleGNlcHRpb25zXG4gKiAoZS5nLiBmcm9tIGNpcmN1bGFyIG9iamVjdHMpIGFuZCBhbHdheXMgcmV0dXJucyBhIHN0cmluZyBhbmQgbmV2ZXIgdGhyb3dzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RyaW5naWZ5U2FmZVdpdGhMaW1pdHMobGltaXRzOiB7fFxuICBtYXhEZXB0aD86IG51bWJlcixcbiAgbWF4U3RyaW5nTGltaXQ/OiBudW1iZXIsXG4gIG1heEFycmF5TGltaXQ/OiBudW1iZXIsXG4gIG1heE9iamVjdEtleXNMaW1pdD86IG51bWJlcixcbnx9KTogbWl4ZWQgPT4gc3RyaW5nIHtcbiAgY29uc3Qge1xuICAgIG1heERlcHRoID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgIG1heFN0cmluZ0xpbWl0ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgIG1heEFycmF5TGltaXQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgbWF4T2JqZWN0S2V5c0xpbWl0ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICB9ID0gbGltaXRzO1xuICBjb25zdCBzdGFjayA9IFtdO1xuICBmdW5jdGlvbiByZXBsYWNlcihrZXk6IHN0cmluZywgdmFsdWU6IG1peGVkKTogbWl4ZWQge1xuICAgIHdoaWxlIChzdGFjay5sZW5ndGggJiYgdGhpcyAhPT0gc3RhY2tbMF0pIHtcbiAgICAgIHN0YWNrLnNoaWZ0KCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHRydW5jYXRlZFN0cmluZyA9ICcuLi4odHJ1bmNhdGVkKS4uLic7XG4gICAgICBpZiAodmFsdWUubGVuZ3RoID4gbWF4U3RyaW5nTGltaXQgKyB0cnVuY2F0ZWRTdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcoMCwgbWF4U3RyaW5nTGltaXQpICsgdHJ1bmNhdGVkU3RyaW5nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIGxldCByZXR2YWwgPSB2YWx1ZTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGlmIChzdGFjay5sZW5ndGggPj0gbWF4RGVwdGgpIHtcbiAgICAgICAgcmV0dmFsID0gYFsgLi4uIGFycmF5IHdpdGggJHt2YWx1ZS5sZW5ndGh9IHZhbHVlcyAuLi4gXWA7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlLmxlbmd0aCA+IG1heEFycmF5TGltaXQpIHtcbiAgICAgICAgcmV0dmFsID0gdmFsdWVcbiAgICAgICAgICAuc2xpY2UoMCwgbWF4QXJyYXlMaW1pdClcbiAgICAgICAgICAuY29uY2F0KFtcbiAgICAgICAgICAgIGAuLi4gZXh0cmEgJHt2YWx1ZS5sZW5ndGggLSBtYXhBcnJheUxpbWl0fSB2YWx1ZXMgdHJ1bmNhdGVkIC4uLmAsXG4gICAgICAgICAgXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEFkZCByZWZpbmVtZW50IGFmdGVyIEFycmF5LmlzQXJyYXkgY2FsbC5cbiAgICAgIGludmFyaWFudCh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnLCAnVGhpcyB3YXMgYWxyZWFkeSBmb3VuZCBlYXJsaWVyJyk7XG4gICAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgICAgIGlmIChzdGFjay5sZW5ndGggPj0gbWF4RGVwdGgpIHtcbiAgICAgICAgcmV0dmFsID0gYHsgLi4uIG9iamVjdCB3aXRoICR7a2V5cy5sZW5ndGh9IGtleXMgLi4uIH1gO1xuICAgICAgfSBlbHNlIGlmIChrZXlzLmxlbmd0aCA+IG1heE9iamVjdEtleXNMaW1pdCkge1xuICAgICAgICAvLyBSZXR1cm4gYSBzYW1wbGUgb2YgdGhlIGtleXMuXG4gICAgICAgIHJldHZhbCA9IHt9O1xuICAgICAgICBmb3IgKGxldCBrIG9mIGtleXMuc2xpY2UoMCwgbWF4T2JqZWN0S2V5c0xpbWl0KSkge1xuICAgICAgICAgIHJldHZhbFtrXSA9IHZhbHVlW2tdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRydW5jYXRlZEtleSA9ICcuLi4odHJ1bmNhdGVkIGtleXMpLi4uJztcbiAgICAgICAgcmV0dmFsW3RydW5jYXRlZEtleV0gPSBrZXlzLmxlbmd0aCAtIG1heE9iamVjdEtleXNMaW1pdDtcbiAgICAgIH1cbiAgICB9XG4gICAgc3RhY2sudW5zaGlmdChyZXR2YWwpO1xuICAgIHJldHVybiByZXR2YWw7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gc3RyaW5naWZ5U2FmZShhcmc6IG1peGVkKTogc3RyaW5nIHtcbiAgICBpZiAoYXJnID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgICB9IGVsc2UgaWYgKGFyZyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuICdudWxsJztcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhcmcudG9TdHJpbmcoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuICdbZnVuY3Rpb24gdW5rbm93bl0nO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXJnIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHJldHVybiBhcmcubmFtZSArICc6ICcgKyBhcmcubWVzc2FnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUGVyZm9ybSBhIHRyeSBjYXRjaCwganVzdCBpbiBjYXNlIHRoZSBvYmplY3QgaGFzIGEgY2lyY3VsYXJcbiAgICAgIC8vIHJlZmVyZW5jZSBvciBzdHJpbmdpZnkgdGhyb3dzIGZvciBzb21lIG90aGVyIHJlYXNvbi5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJldCA9IEpTT04uc3RyaW5naWZ5KGFyZywgcmVwbGFjZXIpO1xuICAgICAgICBpZiAocmV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gJ1tcIicgKyB0eXBlb2YgYXJnICsgJ1wiIGZhaWxlZCB0byBzdHJpbmdpZnldJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAodHlwZW9mIGFyZy50b1N0cmluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdIDogdG9TdHJpbmcgc2hvdWxkbid0IHRha2UgYW55IGFyZ3VtZW50cyBpbiBnZW5lcmFsLlxuICAgICAgICAgICAgcmV0dXJuIGFyZy50b1N0cmluZygpO1xuICAgICAgICAgIH0gY2F0Y2ggKEUpIHt9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICdbXCInICsgdHlwZW9mIGFyZyArICdcIiBmYWlsZWQgdG8gc3RyaW5naWZ5XSc7XG4gIH07XG59XG5cbmNvbnN0IHN0cmluZ2lmeVNhZmU6IG1peGVkID0+IHN0cmluZyA9IGNyZWF0ZVN0cmluZ2lmeVNhZmVXaXRoTGltaXRzKHtcbiAgbWF4RGVwdGg6IDEwLFxuICBtYXhTdHJpbmdMaW1pdDogMTAwLFxuICBtYXhBcnJheUxpbWl0OiA1MCxcbiAgbWF4T2JqZWN0S2V5c0xpbWl0OiA1MCxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnlTYWZlO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQVVBOzs7Ozs7OztBQU1PLFNBQVNBLDZCQUFULENBQXVDQyxNQUF2QyxFQUtjO0VBQ25CLHVCQUtJQSxNQUxKLENBQ0VDLFFBREY7RUFBQSxJQUNFQSxRQURGLGlDQUNhQyxNQUFNLENBQUNDLGlCQURwQjtFQUFBLDRCQUtJSCxNQUxKLENBRUVJLGNBRkY7RUFBQSxJQUVFQSxjQUZGLHNDQUVtQkYsTUFBTSxDQUFDQyxpQkFGMUI7RUFBQSw0QkFLSUgsTUFMSixDQUdFSyxhQUhGO0VBQUEsSUFHRUEsYUFIRixzQ0FH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