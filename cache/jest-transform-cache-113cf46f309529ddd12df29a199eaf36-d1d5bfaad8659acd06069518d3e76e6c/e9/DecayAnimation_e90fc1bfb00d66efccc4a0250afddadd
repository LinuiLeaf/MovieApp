a98c106197de8fb8a9fd859e7f601870
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Animation = require('./Animation');

var _require = require('../NativeAnimatedHelper'),
    shouldUseNativeDriver = _require.shouldUseNativeDriver;

var DecayAnimation = function (_Animation) {
  (0, _inherits2.default)(DecayAnimation, _Animation);

  var _super = _createSuper(DecayAnimation);

  function DecayAnimation(config) {
    var _config$deceleration, _config$isInteraction, _config$iterations;

    var _this;

    (0, _classCallCheck2.default)(this, DecayAnimation);
    _this = _super.call(this);
    _this._deceleration = (_config$deceleration = config.deceleration) != null ? _config$deceleration : 0.998;
    _this._velocity = config.velocity;
    _this._useNativeDriver = shouldUseNativeDriver(config);
    _this.__isInteraction = (_config$isInteraction = config.isInteraction) != null ? _config$isInteraction : !_this._useNativeDriver;
    _this.__iterations = (_config$iterations = config.iterations) != null ? _config$iterations : 1;
    return _this;
  }

  (0, _createClass2.default)(DecayAnimation, [{
    key: "__getNativeAnimationConfig",
    value: function __getNativeAnimationConfig() {
      return {
        type: 'decay',
        deceleration: this._deceleration,
        velocity: this._velocity,
        iterations: this.__iterations
      };
    }
  }, {
    key: "start",
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      this.__active = true;
      this._lastValue = fromValue;
      this._fromValue = fromValue;
      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;
      this._startTime = Date.now();

      if (this._useNativeDriver) {
        this.__startNativeAnimation(animatedValue);
      } else {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: "onUpdate",
    value: function onUpdate() {
      var now = Date.now();
      var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

      this._onUpdate(value);

      if (Math.abs(this._lastValue - value) < 0.1) {
        this.__debouncedOnEnd({
          finished: true
        });

        return;
      }

      this._lastValue = value;

      if (this.__active) {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(DecayAnimation.prototype), "stop", this).call(this);
      this.__active = false;
      global.cancelAnimationFrame(this._animationFrame);

      this.__debouncedOnEnd({
        finished: false
      });
    }
  }]);
  return DecayAnimation;
}(Animation);

module.exports = DecayAnimation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBbmltYXRpb24iLCJyZXF1aXJlIiwic2hvdWxkVXNlTmF0aXZlRHJpdmVyIiwiRGVjYXlBbmltYXRpb24iLCJjb25maWciLCJfZGVjZWxlcmF0aW9uIiwiZGVjZWxlcmF0aW9uIiwiX3ZlbG9jaXR5IiwidmVsb2NpdHkiLCJfdXNlTmF0aXZlRHJpdmVyIiwiX19pc0ludGVyYWN0aW9uIiwiaXNJbnRlcmFjdGlvbiIsIl9faXRlcmF0aW9ucyIsIml0ZXJhdGlvbnMiLCJ0eXBlIiwiZnJvbVZhbHVlIiwib25VcGRhdGUiLCJvbkVuZCIsInByZXZpb3VzQW5pbWF0aW9uIiwiYW5pbWF0ZWRWYWx1ZSIsIl9fYWN0aXZlIiwiX2xhc3RWYWx1ZSIsIl9mcm9tVmFsdWUiLCJfb25VcGRhdGUiLCJfX29uRW5kIiwiX3N0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJfX3N0YXJ0TmF0aXZlQW5pbWF0aW9uIiwiX2FuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYmluZCIsInZhbHVlIiwiTWF0aCIsImV4cCIsImFicyIsIl9fZGVib3VuY2VkT25FbmQiLCJmaW5pc2hlZCIsImdsb2JhbCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkRlY2F5QW5pbWF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFuaW1hdGlvbiA9IHJlcXVpcmUoJy4vQW5pbWF0aW9uJyk7XG5cbmNvbnN0IHtzaG91bGRVc2VOYXRpdmVEcml2ZXJ9ID0gcmVxdWlyZSgnLi4vTmF0aXZlQW5pbWF0ZWRIZWxwZXInKTtcblxuaW1wb3J0IHR5cGUgQW5pbWF0ZWRWYWx1ZSBmcm9tICcuLi9ub2Rlcy9BbmltYXRlZFZhbHVlJztcbmltcG9ydCB0eXBlIHtBbmltYXRpb25Db25maWcsIEVuZENhbGxiYWNrfSBmcm9tICcuL0FuaW1hdGlvbic7XG5cbmV4cG9ydCB0eXBlIERlY2F5QW5pbWF0aW9uQ29uZmlnID0ge1xuICAuLi5BbmltYXRpb25Db25maWcsXG4gIHZlbG9jaXR5OlxuICAgIHwgbnVtYmVyXG4gICAgfCB7XG4gICAgICAgIHg6IG51bWJlcixcbiAgICAgICAgeTogbnVtYmVyLFxuICAgICAgICAuLi5cbiAgICAgIH0sXG4gIGRlY2VsZXJhdGlvbj86IG51bWJlcixcbn07XG5cbmV4cG9ydCB0eXBlIERlY2F5QW5pbWF0aW9uQ29uZmlnU2luZ2xlID0ge1xuICAuLi5BbmltYXRpb25Db25maWcsXG4gIHZlbG9jaXR5OiBudW1iZXIsXG4gIGRlY2VsZXJhdGlvbj86IG51bWJlcixcbn07XG5cbmNsYXNzIERlY2F5QW5pbWF0aW9uIGV4dGVuZHMgQW5pbWF0aW9uIHtcbiAgX3N0YXJ0VGltZTogbnVtYmVyO1xuICBfbGFzdFZhbHVlOiBudW1iZXI7XG4gIF9mcm9tVmFsdWU6IG51bWJlcjtcbiAgX2RlY2VsZXJhdGlvbjogbnVtYmVyO1xuICBfdmVsb2NpdHk6IG51bWJlcjtcbiAgX29uVXBkYXRlOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZDtcbiAgX2FuaW1hdGlvbkZyYW1lOiBhbnk7XG4gIF91c2VOYXRpdmVEcml2ZXI6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBEZWNheUFuaW1hdGlvbkNvbmZpZ1NpbmdsZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fZGVjZWxlcmF0aW9uID0gY29uZmlnLmRlY2VsZXJhdGlvbiA/PyAwLjk5ODtcbiAgICB0aGlzLl92ZWxvY2l0eSA9IGNvbmZpZy52ZWxvY2l0eTtcbiAgICB0aGlzLl91c2VOYXRpdmVEcml2ZXIgPSBzaG91bGRVc2VOYXRpdmVEcml2ZXIoY29uZmlnKTtcbiAgICB0aGlzLl9faXNJbnRlcmFjdGlvbiA9IGNvbmZpZy5pc0ludGVyYWN0aW9uID8/ICF0aGlzLl91c2VOYXRpdmVEcml2ZXI7XG4gICAgdGhpcy5fX2l0ZXJhdGlvbnMgPSBjb25maWcuaXRlcmF0aW9ucyA/PyAxO1xuICB9XG5cbiAgX19nZXROYXRpdmVBbmltYXRpb25Db25maWcoKToge3xcbiAgICBkZWNlbGVyYXRpb246IG51bWJlcixcbiAgICBpdGVyYXRpb25zOiBudW1iZXIsXG4gICAgdHlwZTogJFRFTVBPUkFSWSRzdHJpbmc8J2RlY2F5Jz4sXG4gICAgdmVsb2NpdHk6IG51bWJlcixcbiAgfH0ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnZGVjYXknLFxuICAgICAgZGVjZWxlcmF0aW9uOiB0aGlzLl9kZWNlbGVyYXRpb24sXG4gICAgICB2ZWxvY2l0eTogdGhpcy5fdmVsb2NpdHksXG4gICAgICBpdGVyYXRpb25zOiB0aGlzLl9faXRlcmF0aW9ucyxcbiAgICB9O1xuICB9XG5cbiAgc3RhcnQoXG4gICAgZnJvbVZhbHVlOiBudW1iZXIsXG4gICAgb25VcGRhdGU6ICh2YWx1ZTogbnVtYmVyKSA9PiB2b2lkLFxuICAgIG9uRW5kOiA/RW5kQ2FsbGJhY2ssXG4gICAgcHJldmlvdXNBbmltYXRpb246ID9BbmltYXRpb24sXG4gICAgYW5pbWF0ZWRWYWx1ZTogQW5pbWF0ZWRWYWx1ZSxcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5fX2FjdGl2ZSA9IHRydWU7XG4gICAgdGhpcy5fbGFzdFZhbHVlID0gZnJvbVZhbHVlO1xuICAgIHRoaXMuX2Zyb21WYWx1ZSA9IGZyb21WYWx1ZTtcbiAgICB0aGlzLl9vblVwZGF0ZSA9IG9uVXBkYXRlO1xuICAgIHRoaXMuX19vbkVuZCA9IG9uRW5kO1xuICAgIHRoaXMuX3N0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgaWYgKHRoaXMuX3VzZU5hdGl2ZURyaXZlcikge1xuICAgICAgdGhpcy5fX3N0YXJ0TmF0aXZlQW5pbWF0aW9uKGFuaW1hdGVkVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddIGFkZGVkIHdoZW4gaW1wcm92aW5nIHR5cGluZyBmb3IgdGhpcyBwYXJhbWV0ZXJzXG4gICAgICB0aGlzLl9hbmltYXRpb25GcmFtZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLm9uVXBkYXRlLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIG9uVXBkYXRlKCk6IHZvaWQge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgICBjb25zdCB2YWx1ZSA9XG4gICAgICB0aGlzLl9mcm9tVmFsdWUgK1xuICAgICAgKHRoaXMuX3ZlbG9jaXR5IC8gKDEgLSB0aGlzLl9kZWNlbGVyYXRpb24pKSAqXG4gICAgICAgICgxIC0gTWF0aC5leHAoLSgxIC0gdGhpcy5fZGVjZWxlcmF0aW9uKSAqIChub3cgLSB0aGlzLl9zdGFydFRpbWUpKSk7XG5cbiAgICB0aGlzLl9vblVwZGF0ZSh2YWx1ZSk7XG5cbiAgICBpZiAoTWF0aC5hYnModGhpcy5fbGFzdFZhbHVlIC0gdmFsdWUpIDwgMC4xKSB7XG4gICAgICB0aGlzLl9fZGVib3VuY2VkT25FbmQoe2ZpbmlzaGVkOiB0cnVlfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fbGFzdFZhbHVlID0gdmFsdWU7XG4gICAgaWYgKHRoaXMuX19hY3RpdmUpIHtcbiAgICAgIC8vICRGbG93Rml4TWVbbWV0aG9kLXVuYmluZGluZ10gYWRkZWQgd2hlbiBpbXByb3ZpbmcgdHlwaW5nIGZvciB0aGlzIHBhcmFtZXRlcnNcbiAgICAgIHRoaXMuX2FuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMub25VcGRhdGUuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgc3RvcCgpOiB2b2lkIHtcbiAgICBzdXBlci5zdG9wKCk7XG4gICAgdGhpcy5fX2FjdGl2ZSA9IGZhbHNlO1xuICAgIGdsb2JhbC5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9hbmltYXRpb25GcmFtZSk7XG4gICAgdGhpcy5fX2RlYm91bmNlZE9uRW5kKHtmaW5pc2hlZDogZmFsc2V9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERlY2F5QW5pbWF0aW9uO1xuIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxhQUFELENBQXpCOztBQUVBLGVBQWdDQSxPQUFPLENBQUMseUJBQUQsQ0FBdkM7QUFBQSxJQUFPQyxxQkFBUCxZQUFPQSxxQkFBUDs7SUF1Qk1DLGM7Ozs7O0VBVUosd0JBQVlDLE1BQVosRUFBZ0Q7SUFBQTs7SUFBQTs7SUFBQTtJQUM5QztJQUNBLE1BQUtDLGFBQUwsMkJBQXFCRCxNQUFNLENBQUNFLFlBQTVCLG1DQUE0QyxLQUE1QztJQUNBLE1BQUtDLFNBQUwsR0FBaUJILE1BQU0sQ0FBQ0ksUUFBeEI7SUFDQSxNQUFLQyxnQkFBTCxHQUF3QlAscUJBQXFCLENBQUNFLE1BQUQsQ0FBN0M7SUFDQSxNQUFLTSxlQUFMLDRCQUF1Qk4sTUFBTSxDQUFDTyxhQUE5QixvQ0FBK0MsQ0FBQyxNQUFLRixnQkFBckQ7SUFDQSxNQUFLRyxZQUFMLHlCQUFvQlIsTUFBTSxDQUFDUyxVQUEzQixpQ0FBeUMsQ0FBekM7SUFOOEM7RUFPL0M7Ozs7V0FFRCxzQ0FLRztNQUNELE9BQU87UUFDTEMsSUFBSSxFQUFFLE9BREQ7UUFFTFIsWUFBWSxFQUFFLEtBQUtELGFBRmQ7UUFHTEcsUUFBUSxFQUFFLEtBQUtELFNBSFY7UUFJTE0sVUFBVSxFQUFFLEtBQUtEO01BSlosQ0FBUDtJQU1EOzs7V0FFRCxlQUNFRyxTQURGLEVBRUVDLFFBRkYsRUFHRUMsS0FIRixFQUlFQyxpQkFKRixFQUtFQyxhQUxGLEVBTVE7TUFDTixLQUFLQyxRQUFMLEdBQWdCLElBQWhCO01BQ0EsS0FBS0MsVUFBTCxHQUFrQk4sU0FBbEI7TUFDQSxLQUFLTyxVQUFMLEdBQWtCUCxTQUFsQjtNQUNBLEtBQUtRLFNBQUwsR0FBaUJQLFFBQWpCO01BQ0EsS0FBS1EsT0FBTCxHQUFlUCxLQUFmO01BQ0EsS0FBS1EsVUFBTCxHQUFrQkMsSUFBSSxDQUFDQyxHQUFMLEVBQWxCOztNQUNBLElBQUksS0FBS2xCLGdCQUFULEVBQTJCO1FBQ3pCLEtBQUttQixzQkFBTCxDQUE0QlQsYUFBNUI7TUFDRCxDQUZELE1BRU87UUFFTCxLQUFLVSxlQUFMLEdBQXVCQyxxQkFBcUIsQ0FBQyxLQUFLZCxRQUFMLENBQWNlLElBQWQsQ0FBbUIsSUFBbkIsQ0FBRCxDQUE1QztNQUNEO0lBQ0Y7OztXQUVELG9CQUFpQjtNQUNmLElBQU1KLEdBQUcsR0FBR0QsSUFBSSxDQUFDQyxHQUFMLEVBQVo7TUFFQSxJQUFNSyxLQUFLLEdBQ1QsS0FBS1YsVUFBTCxHQUNDLEtBQUtmLFNBQUwsSUFBa0IsSUFBSSxLQUFLRixhQUEzQixDQUFELElBQ0csSUFBSTRCLElBQUksQ0FBQ0MsR0FBTCxDQUFTLEVBQUUsSUFBSSxLQUFLN0IsYUFBWCxLQUE2QnNCLEdBQUcsR0FBRyxLQUFLRixVQUF4QyxDQUFULENBRFAsQ0FGRjs7TUFLQSxLQUFLRixTQUFMLENBQWVTLEtBQWY7O01BRUEsSUFBSUMsSUFBSSxDQUFDRSxHQUFMLENBQVMsS0FBS2QsVUFBTCxHQUFrQlcsS0FBM0IsSUFBb0MsR0FBeEMsRUFBNkM7UUFDM0MsS0FBS0ksZ0JBQUwsQ0FBc0I7VUFBQ0MsUUFBUSxFQUFFO1FBQVgsQ0FBdEI7O1FBQ0E7TUFDRDs7TUFFRCxLQUFLaEIsVUFBTCxHQUFrQlcsS0FBbEI7O01BQ0EsSUFBSSxLQUFLWixRQUFULEVBQW1CO1FBRWpCLEtBQUtTLGVBQUwsR0FBdUJDLHFCQUFxQixDQUFDLEtBQUtkLFFBQUwsQ0FBY2UsSUFBZCxDQUFtQixJQUFuQixDQUFELENBQTVDO01BQ0Q7SUFDRjs7O1dBRUQsZ0JBQWE7TUFDWDtNQUNBLEtBQUtYLFFBQUwsR0FBZ0IsS0FBaEI7TUFDQWtCLE1BQU0sQ0FBQ0Msb0JBQVAsQ0FBNEIsS0FBS1YsZUFBakM7O01BQ0EsS0FBS08sZ0JBQUwsQ0FBc0I7UUFBQ0MsUUFBUSxFQUFFO01BQVgsQ0FBdEI7SUFDRDs7O0VBakYwQnJDLFM7O0FBb0Y3QndDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnRDLGNBQWpCIn0=