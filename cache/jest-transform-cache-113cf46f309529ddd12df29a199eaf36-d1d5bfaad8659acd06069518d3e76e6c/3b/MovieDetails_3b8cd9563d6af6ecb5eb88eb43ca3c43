84c07dec43d739056561a38cda42dfea
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _reactNative = require("react-native");

var _styles = _interopRequireDefault(require("./styles"));

var _react = _interopRequireWildcard(require("react"));

var _images = _interopRequireDefault(require("../../config/images"));

var _constants = _interopRequireDefault(require("../../config/constants"));

var _hudView = _interopRequireDefault(require("../../components/hudView"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var MovieDetails = function (_Component) {
  (0, _inherits2.default)(MovieDetails, _Component);

  var _super = _createSuper(MovieDetails);

  function MovieDetails(props) {
    var _this;

    (0, _classCallCheck2.default)(this, MovieDetails);
    _this = _super.call(this, props);

    _this._didTapOnBackButton = function () {
      _this.props.navigation.goBack();
    };

    _this._addToWatchList = function () {};

    _this.state = {
      movieData: "",
      isWatchlistItem: false
    };
    return _this;
  }

  (0, _createClass2.default)(MovieDetails, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var id = this.props.navigation.state.params.id;
      var watchlistItems = this.props.watchlistItems;
      var filterData = watchlistItems.filter(function (item) {
        return item.id == id;
      });
      this.setState({
        isWatchlistItem: filterData.length > 0
      });
      this.props.getMovieDetailsAction(id, function (_ref) {
        var data = _ref.data,
            status = _ref.status;

        if (status) {
          console.log("MOVIE DETAIL SCREEN", data);

          _this2.setState({
            movieData: data
          });
        }
      });
    }
  }, {
    key: "_notifyMessage",
    value: function _notifyMessage(msg) {
      if (Platform.OS === "android") {
        _reactNative.ToastAndroid.show(msg, _reactNative.ToastAndroid.SHORT);
      } else {
        alert(msg);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$state = this.state,
          movieData = _this$state.movieData,
          isWatchlistItem = _this$state.isWatchlistItem;
      var isLoading = this.props.isLoading;
      return _react.default.createElement(_reactNative.SafeAreaView, {
        style: _styles.default.safeContainer
      }, _react.default.createElement(_reactNative.ScrollView, {
        showsVerticalScrollIndicator: false
      }, _react.default.createElement(_reactNative.Image, {
        style: _styles.default.posterStyle,
        source: {
          uri: _constants.default.APP_IMG_URL_LARGE + movieData.poster_path
        }
      }), _react.default.createElement(_reactNative.View, {
        style: _styles.default.movieTitleContainer
      }, _react.default.createElement(_reactNative.Image, {
        style: _styles.default.imgStyle,
        source: {
          uri: _constants.default.APP_IMG_URL_LARGE + movieData.poster_path
        }
      }), _react.default.createElement(_reactNative.Text, {
        style: _styles.default.movieTitleTextStyle
      }, movieData.title)), _react.default.createElement(_reactNative.FlatList, {
        style: _styles.default.genreListStyle,
        horizontal: true,
        data: movieData.genres,
        renderItem: function renderItem(_ref2) {
          var item = _ref2.item,
              key = _ref2.key;
          return _react.default.createElement(_reactNative.View, {
            style: [{
              marginLeft: key == 0 ? 20 : 10,
              marginRight: key == movieData.genres.length - 1 ? 20 : 10
            }]
          }, !!item.name && _react.default.createElement(_reactNative.View, {
            style: _styles.default.genreContainer
          }, _react.default.createElement(_reactNative.Text, {
            style: _styles.default.genreTextStyle
          }, item.name)));
        }
      }), _react.default.createElement(_reactNative.View, {
        style: _styles.default.movieTitleContainer
      }, _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.aboutMovieStyle]
      }, "About Movie"), _react.default.createElement(_reactNative.View, {
        style: _styles.default.thinSeparator
      }), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.overviewStyle]
      }, "Overviews:"), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.overviewContentStyle]
      }, movieData.overview), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.releaseStyle]
      }, "Release Date:"), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.releaseContentStyle]
      }, movieData.release_date), _react.default.createElement(_reactNative.View, {
        style: _styles.default.rowStyle
      }, _react.default.createElement(_reactNative.View, {
        style: _styles.default.avgRatingContainer
      }, _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.releaseContentStyle]
      }, "Average Rating:"), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.releaseContentStyle]
      }, movieData.vote_average)), _react.default.createElement(_reactNative.View, {
        style: {
          flex: 1,
          flexDirection: "column",
          marginTop: 12,
          alignItems: "flex-start"
        }
      }, _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, {
          fontSize: 12
        }]
      }, "Rate Count:"), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, {
          fontSize: 12
        }]
      }, movieData.vote_count))), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.releaseStyle]
      }, "Popularity:"), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.releaseContentStyle]
      }, movieData.popularity))), _react.default.createElement(_reactNative.View, {
        style: _styles.default.bottomContainerStyle
      }, _react.default.createElement(_reactNative.View, {
        style: _styles.default.backButtonContainerStyle
      }, _react.default.createElement(_reactNative.TouchableOpacity, {
        style: _styles.default.backButtonContainer,
        onPress: function onPress() {
          return _this3._didTapOnBackButton();
        }
      }, _react.default.createElement(_reactNative.Image, {
        style: _styles.default.backButtonImageStyle,
        source: _images.default.back
      }), _react.default.createElement(_reactNative.Text, {
        style: [_styles.default.movieTextStyle, _styles.default.backTextStyle]
      }, "Back"))), _react.default.createElement(_reactNative.View, {
        style: _styles.default.watchListContainerStyle
      }, _react.default.createElement(_reactNative.TouchableOpacity, {
        style: _styles.default.watchListContainer,
        onPress: function onPress() {
          return _this3._addToWatchList();
        }
      }, _react.default.createElement(_reactNative.Image, {
        style: _styles.default.watchListImageStyle,
        source: isWatchlistItem ? _images.default.watchlist_dark_tick : _images.default.watchlist_dark
      })))), isLoading && _react.default.createElement(_hudView.default, null));
    }
  }]);
  return MovieDetails;
}(_react.Component);

exports.default = MovieDetails;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,