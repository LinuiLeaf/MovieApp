f2d87f77d408b1552e40e3f79a3d55ed
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _reactNative = require("react-native");

var _styles = _interopRequireDefault(require("./styles"));

var _react = _interopRequireWildcard(require("react"));

var _images = _interopRequireDefault(require("../../config/images"));

var _constants = _interopRequireDefault(require("../../config/constants"));

var _hudView = _interopRequireDefault(require("../../components/hudView"));

var _MovieRow = _interopRequireDefault(require("../../components/MovieRow"));

var _apiConstants = _interopRequireDefault(require("../../api/apiConstants"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var DashboardScreen = function (_Component) {
  (0, _inherits2.default)(DashboardScreen, _Component);

  var _super = _createSuper(DashboardScreen);

  function DashboardScreen(props) {
    var _this;

    (0, _classCallCheck2.default)(this, DashboardScreen);
    _this = _super.call(this, props);

    _this._onPressRow = function (item) {
      console.log("Movie Id--->", item.id);

      _this.props.navigation.navigate("MovieDetails", {
        id: item.id,
        item: item
      });
    };

    _this._onPressCategory = function (keyItem) {
      console.log("Cat Id--->", keyItem);

      _this.setState({
        catId: keyItem,
        selectedItem: keyItem
      });

      var params;

      switch (keyItem) {
        case "1":
          params = _apiConstants.default.API_TOP_RATED;
          break;

        case "2":
          params = _apiConstants.default.API_POPULAR;
          break;

        case "3":
          params = _apiConstants.default.API_NOW_PLAYING;
          break;

        case "4":
          params = _apiConstants.default.API_LATEST;
          break;

        case "5":
          params = _apiConstants.default.API_UPCOMING;
          break;
      }

      _this.props.getTopRatedAction(params, function (_ref) {
        var data = _ref.data,
            status = _ref.status;

        if (status) {
          console.log("DASHBOARD SCREEN", data);

          _this.setState({
            movieData: data
          });
        }
      });
    };

    _this._didTapOnBackButton = function () {
      _this.props.navigation.goBack();
    };

    _this._openWatchList = function () {
      _this.props.navigation.navigate("WatchLists");
    };

    _this.state = {
      movieData: "",
      catId: 1,
      selectedItem: 1,
      isWatchlistItem: false
    };
    return _this;
  }

  (0, _createClass2.default)(DashboardScreen, [{
    key: "_checkWatchListItem",
    value: function _checkWatchListItem(id) {
      var watchlistItems = this.props.watchlistItems;
      var filterData = watchlistItems.filter(function (item) {
        return item.id == id;
      });
      if (filterData.length > 0) return true;else return false;
    }
  }, {
    key: "getCategories",
    value: function getCategories() {
      return [{
        id: "1",
        category: "Top rated"
      }, {
        id: "2",
        category: "Popular"
      }, {
        id: "3",
        category: "Now Playing"
      }, {
        id: "4",
        category: "Latest"
      }, {
        id: "5",
        category: "Upcoming"
      }];
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var catId = this.state.catId;
      var getTopRatedAction = this.props.getTopRatedAction;
      getTopRatedAction(_apiConstants.default.API_TOP_RATED, function (_ref2) {
        var data = _ref2.data,
            status = _ref2.status;

        if (status) {
          console.log("DASHBOARD SCREEN", data);

          _this2.setState({
            movieData: data
          });
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var isLoading = this.props.isLoading;
      var movieData = this.state.movieData;
      return _react.default.createElement(_reactNative.SafeAreaView, {
        style: _styles.default.safeContainer
      }, _react.default.createElement(_reactNative.Text, {
        style: _styles.default.headingTextStyle
      }, "Movies App"), _react.default.createElement(_reactNative.Text, {
        style: _styles.default.subHeadingOneTextStyle
      }, "Find your movies"), _react.default.createElement(_reactNative.Text, {
        style: _styles.default.subHeadingOneTextStyle
      }, "Categories"), _react.default.createElement(_reactNative.FlatList, {
        extraData: this.state.selectedItem,
        style: _styles.default.categoryListStyle,
        horizontal: true,
        data: this.getCategories(),
        showsHorizontalScrollIndicator: false,
        renderItem: function renderItem(_ref3) {
          var item = _ref3.item,
              index = _ref3.index;
          return _react.default.createElement(_reactNative.View, {
            style: [{
              marginLeft: index == 0 ? 20 : 10,
              marginRight: index == _this3.getCategories().length - 1 ? 20 : 10
            }]
          }, !!item.category && _react.default.createElement(_reactNative.TouchableOpacity, {
            style: _this3.state.selectedItem === item.id ? [_styles.default.categoryContainer, {
              backgroundColor: _constants.default.APP_GREEN_COLOR
            }] : [_styles.default.categoryContainer, {
              backgroundColor: _constants.default.APP_GENRES_COLOR
            }],
            onPress: function onPress() {
              return _this3._onPressCategory(item.id);
            }
          }, _react.default.createElement(_reactNative.Text, {
            style: _this3.state.selectedItem === item.id ? _styles.default.selectedText : _styles.default.categoryTextStyle
          }, item.category)));
        }
      }), _react.default.createElement(_reactNative.FlatList, {
        style: _styles.default.movieListStyle,
        data: movieData,
        showsVerticalScrollIndicator: false,
        extraData: movieData,
        renderItem: function renderItem(_ref4) {
          var item = _ref4.item;
          return _react.default.createElement(_reactNative.TouchableHighlight, {
            underlayColor: _constants.default.APP_TAB_COLOR,
            style: _styles.default.movieListContentStyle,
            key: item.id,
            onPress: function onPress() {
              return _this3._onPressRow(item);
            }
          }, _react.default.createElement(_MovieRow.default, {
            isFromDashboard: true,
            isWatchListItems: _this3._checkWatchListItem(item.id),
            title: item.title,
            releasedate: item.release_date,
            image_url: _constants.default.APP_IMG_URL_SMALL + item.poster_path,
            avgrating: item.vote_average
          }));
        }
      }), _react.default.createElement(_reactNative.View, {
        style: _styles.default.watchListContainer
      }, _react.default.createElement(_reactNative.TouchableOpacity, {
        onPress: function onPress() {
          return _this3._openWatchList();
        },
        style: _styles.default.watchlistStyles
      }, _react.default.createElement(_reactNative.Text, {
        style: _styles.default.watchlistText
      }, "Watch List"), _react.default.createElement(_reactNative.Image, {
        style: _styles.default.watchListImageStyle,
        source: _images.default.watchlist_dark
      }))), isLoading && _react.default.createElement(_hudView.default, null));
    }
  }]);
  return DashboardScreen;
}(_react.Component);

exports.default = DashboardScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,