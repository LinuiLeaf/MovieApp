{"version":3,"names":["NativeText","createReactNativeComponentClass","validAttributes","ReactNativeViewAttributes","UIView","isHighlighted","numberOfLines","ellipsizeMode","allowFontScaling","maxFontSizeMultiplier","disabled","selectable","selectionColor","adjustsFontSizeToFit","minimumFontScale","textBreakStrategy","onTextLayout","onInlineViewLayout","dataDetectorType","android_hyphenationFrequency","directEventTypes","topTextLayout","registrationName","topInlineViewLayout","uiViewClassName","NativeVirtualText","global","RN$Bridgeless","UIManager","hasViewManagerConfig"],"sources":["TextNativeComponent.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport ReactNativeViewAttributes from '../Components/View/ReactNativeViewAttributes';\nimport UIManager from '../ReactNative/UIManager';\nimport {type HostComponent} from '../Renderer/shims/ReactNativeTypes';\nimport createReactNativeComponentClass from '../Renderer/shims/createReactNativeComponentClass';\nimport {type ProcessedColorValue} from '../StyleSheet/processColor';\nimport {type TextProps} from './TextProps';\n\ntype NativeTextProps = $ReadOnly<{\n  ...TextProps,\n  isHighlighted?: ?boolean,\n  selectionColor?: ?ProcessedColorValue,\n}>;\n\nexport const NativeText: HostComponent<NativeTextProps> = (createReactNativeComponentClass(\n  'RCTText',\n  () => ({\n    // $FlowFixMe[incompatible-call]\n    validAttributes: {\n      ...ReactNativeViewAttributes.UIView,\n      isHighlighted: true,\n      numberOfLines: true,\n      ellipsizeMode: true,\n      allowFontScaling: true,\n      maxFontSizeMultiplier: true,\n      disabled: true,\n      selectable: true,\n      selectionColor: true,\n      adjustsFontSizeToFit: true,\n      minimumFontScale: true,\n      textBreakStrategy: true,\n      onTextLayout: true,\n      onInlineViewLayout: true,\n      dataDetectorType: true,\n      android_hyphenationFrequency: true,\n    },\n    directEventTypes: {\n      topTextLayout: {\n        registrationName: 'onTextLayout',\n      },\n      topInlineViewLayout: {\n        registrationName: 'onInlineViewLayout',\n      },\n    },\n    uiViewClassName: 'RCTText',\n  }),\n): any);\n\nexport const NativeVirtualText: HostComponent<NativeTextProps> =\n  !global.RN$Bridgeless && !UIManager.hasViewManagerConfig('RCTVirtualText')\n    ? NativeText\n    : (createReactNativeComponentClass('RCTVirtualText', () => ({\n        // $FlowFixMe[incompatible-call]\n        validAttributes: {\n          ...ReactNativeViewAttributes.UIView,\n          isHighlighted: true,\n          maxFontSizeMultiplier: true,\n        },\n        uiViewClassName: 'RCTVirtualText',\n      })): any);\n"],"mappings":";;;;;;;;;AAUA;;AACA;;AAEA;;AAUO,IAAMA,UAA0C,GAAI,IAAAC,wCAAA,EACzD,SADyD,EAEzD;EAAA,OAAO;IAELC,eAAe,6BACVC,kCAAA,CAA0BC,MADhB;MAEbC,aAAa,EAAE,IAFF;MAGbC,aAAa,EAAE,IAHF;MAIbC,aAAa,EAAE,IAJF;MAKbC,gBAAgB,EAAE,IALL;MAMbC,qBAAqB,EAAE,IANV;MAObC,QAAQ,EAAE,IAPG;MAQbC,UAAU,EAAE,IARC;MASbC,cAAc,EAAE,IATH;MAUbC,oBAAoB,EAAE,IAVT;MAWbC,gBAAgB,EAAE,IAXL;MAYbC,iBAAiB,EAAE,IAZN;MAabC,YAAY,EAAE,IAbD;MAcbC,kBAAkB,EAAE,IAdP;MAebC,gBAAgB,EAAE,IAfL;MAgBbC,4BAA4B,EAAE;IAhBjB,EAFV;IAoBLC,gBAAgB,EAAE;MAChBC,aAAa,EAAE;QACbC,gBAAgB,EAAE;MADL,CADC;MAIhBC,mBAAmB,EAAE;QACnBD,gBAAgB,EAAE;MADC;IAJL,CApBb;IA4BLE,eAAe,EAAE;EA5BZ,CAAP;AAAA,CAFyD,CAApD;;AAkCA,IAAMC,iBAAiD,GAC5D,CAACC,MAAM,CAACC,aAAR,IAAyB,CAACC,kBAAA,CAAUC,oBAAV,CAA+B,gBAA/B,CAA1B,GACI7B,UADJ,GAEK,IAAAC,wCAAA,EAAgC,gBAAhC,EAAkD;EAAA,OAAO;IAExDC,eAAe,6BACVC,kCAAA,CAA0BC,MADhB;MAEbC,aAAa,EAAE,IAFF;MAGbI,qBAAqB,EAAE;IAHV,EAFyC;IAOxDe,eAAe,EAAE;EAPuC,CAAP;AAAA,CAAlD,CAHA"}