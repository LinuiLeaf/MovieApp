6962bbe2a93a50fb2c1f9ad0e78cde2e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _NativeFrameRateLogger = _interopRequireDefault(require("./NativeFrameRateLogger"));

var invariant = require('invariant');

var FrameRateLogger = {
  setGlobalOptions: function setGlobalOptions(options) {
    if (options.debug !== undefined) {
      invariant(_NativeFrameRateLogger.default, 'Trying to debug FrameRateLogger without the native module!');
    }

    if (_NativeFrameRateLogger.default) {
      var optionsClone = {
        debug: !!options.debug,
        reportStackTraces: !!options.reportStackTraces
      };

      _NativeFrameRateLogger.default.setGlobalOptions(optionsClone);
    }
  },
  setContext: function setContext(context) {
    _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.setContext(context);
  },
  beginScroll: function beginScroll() {
    _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.beginScroll();
  },
  endScroll: function endScroll() {
    _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.endScroll();
  }
};
module.exports = FrameRateLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwiRnJhbWVSYXRlTG9nZ2VyIiwic2V0R2xvYmFsT3B0aW9ucyIsIm9wdGlvbnMiLCJkZWJ1ZyIsInVuZGVmaW5lZCIsIk5hdGl2ZUZyYW1lUmF0ZUxvZ2dlciIsIm9wdGlvbnNDbG9uZSIsInJlcG9ydFN0YWNrVHJhY2VzIiwic2V0Q29udGV4dCIsImNvbnRleHQiLCJiZWdpblNjcm9sbCIsImVuZFNjcm9sbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJGcmFtZVJhdGVMb2dnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG5pbXBvcnQgTmF0aXZlRnJhbWVSYXRlTG9nZ2VyIGZyb20gJy4vTmF0aXZlRnJhbWVSYXRlTG9nZ2VyJztcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbi8qKlxuICogRmxvdyBBUEkgZm9yIG5hdGl2ZSBGcmFtZVJhdGVMb2dnZXIgbW9kdWxlLiBJZiB0aGUgbmF0aXZlIG1vZHVsZSBpcyBub3QgaW5zdGFsbGVkLCBmdW5jdGlvbiBjYWxsc1xuICogYXJlIGp1c3Qgbm8tb3BzLlxuICpcbiAqIFR5cGljYWwgYmVoYXZpb3IgaXMgdGhhdCBgc2V0Q29udGV4dGAgaXMgY2FsbGVkIHdoZW4gYSBuZXcgc2NyZWVuIGlzIGxvYWRlZCAoZS5nLiB2aWEgYVxuICogbmF2aWdhdGlvbiBpbnRlZ3JhdGlvbiksIGFuZCB0aGVuIGBiZWdpblNjcm9sbGAgaXMgY2FsbGVkIGJ5IGBTY3JvbGxSZXNwb25kZXJgIGF0IHdoaWNoIHBvaW50IHRoZVxuICogbmF0aXZlIG1vZHVsZSB0aGVuIGJlZ2lucyB0cmFja2luZyBmcmFtZSBkcm9wcy4gV2hlbiBgU2Nyb2xsUmVzcG9uZGVyYCBjYWxscyBgZW5kU2Nyb2xsYCwgdGhlXG4gKiBuYXRpdmUgbW9kdWxlIGdhdGhlcnMgdXAgYWxsIGl0J3MgZnJhbWUgZHJvcCBkYXRhIGFuZCByZXBvcnRzIGl0IHZpYSBhbiBhbmFseXRpY3MgcGlwZWxpbmUgZm9yXG4gKiBhbmFseXNpcy5cbiAqXG4gKiBOb3RlIHRoYXQgYGJlZ2luU2Nyb2xsYCBtYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIGJ5IGBTY3JvbGxSZXNwb25kZXJgIC0gdW5jbGVhciBpZiB0aGF0J3MgYVxuICogYnVnLCBidXQgdGhlIG5hdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIHJvYnVzdCB0byB0aGF0LlxuICpcbiAqIEluIHRoZSBmdXR1cmUgd2UgbWF5IGFkZCBzdXBwb3J0IGZvciB0cmFja2luZyBmcmFtZSBkcm9wcyBpbiBvdGhlciB0eXBlcyBvZiBpbnRlcmFjdGlvbnMgYmV5b25kXG4gKiBzY3JvbGxpbmcuXG4gKi9cbmNvbnN0IEZyYW1lUmF0ZUxvZ2dlciA9IHtcbiAgLyoqXG4gICAqIEVuYWJsZSBgZGVidWdgIHRvIHNlZSBsb2NhbCBsb2dzIG9mIHdoYXQncyBnb2luZyBvbi4gYHJlcG9ydFN0YWNrVHJhY2VzYCB3aWxsIGdyYWIgc3RhY2sgdHJhY2VzXG4gICAqIGR1cmluZyBVSSB0aHJlYWQgc3RhbGxzIGFuZCB1cGxvYWQgdGhlbSBpZiB0aGUgbmF0aXZlIG1vZHVsZSBzdXBwb3J0cyBpdC5cbiAgICovXG4gIHNldEdsb2JhbE9wdGlvbnM6IGZ1bmN0aW9uKG9wdGlvbnM6IHtcbiAgICBkZWJ1Zz86IGJvb2xlYW4sXG4gICAgcmVwb3J0U3RhY2tUcmFjZXM/OiBib29sZWFuLFxuICAgIC4uLlxuICB9KSB7XG4gICAgaWYgKG9wdGlvbnMuZGVidWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBOYXRpdmVGcmFtZVJhdGVMb2dnZXIsXG4gICAgICAgICdUcnlpbmcgdG8gZGVidWcgRnJhbWVSYXRlTG9nZ2VyIHdpdGhvdXQgdGhlIG5hdGl2ZSBtb2R1bGUhJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChOYXRpdmVGcmFtZVJhdGVMb2dnZXIpIHtcbiAgICAgIC8vIE5lZWRzIHRvIGNsb25lIHRoZSBvYmplY3QgZmlyc3QgdG8gYXZvaWQgbW9kaWZ5aW5nIHRoZSBhcmd1bWVudC5cbiAgICAgIGNvbnN0IG9wdGlvbnNDbG9uZSA9IHtcbiAgICAgICAgZGVidWc6ICEhb3B0aW9ucy5kZWJ1ZyxcbiAgICAgICAgcmVwb3J0U3RhY2tUcmFjZXM6ICEhb3B0aW9ucy5yZXBvcnRTdGFja1RyYWNlcyxcbiAgICAgIH07XG4gICAgICBOYXRpdmVGcmFtZVJhdGVMb2dnZXIuc2V0R2xvYmFsT3B0aW9ucyhvcHRpb25zQ2xvbmUpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogTXVzdCBjYWxsIGBzZXRDb250ZXh0YCBiZWZvcmUgYW55IGV2ZW50cyBjYW4gYmUgcHJvcGVybHkgdHJhY2tlZCwgd2hpY2ggaXMgZG9uZSBhdXRvbWF0aWNhbGx5XG4gICAqIGluIGBBcHBSZWdpc3RyeWAsIGJ1dCBuYXZpZ2F0aW9uIGlzIGFsc28gYSBjb21tb24gcGxhY2UgdG8gaG9vayBpbi5cbiAgICovXG4gIHNldENvbnRleHQ6IGZ1bmN0aW9uKGNvbnRleHQ6IHN0cmluZykge1xuICAgIE5hdGl2ZUZyYW1lUmF0ZUxvZ2dlciAmJiBOYXRpdmVGcmFtZVJhdGVMb2dnZXIuc2V0Q29udGV4dChjb250ZXh0KTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsbGVkIGluIGBTY3JvbGxSZXNwb25kZXJgIHNvIGFueSBjb21wb25lbnQgdGhhdCB1c2VzIHRoYXQgbW9kdWxlIHdpbGwgaGFuZGxlIHRoaXNcbiAgICogYXV0b21hdGljYWxseS5cbiAgICovXG4gIGJlZ2luU2Nyb2xsKCkge1xuICAgIE5hdGl2ZUZyYW1lUmF0ZUxvZ2dlciAmJiBOYXRpdmVGcmFtZVJhdGVMb2dnZXIuYmVnaW5TY3JvbGwoKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsbGVkIGluIGBTY3JvbGxSZXNwb25kZXJgIHNvIGFueSBjb21wb25lbnQgdGhhdCB1c2VzIHRoYXQgbW9kdWxlIHdpbGwgaGFuZGxlIHRoaXNcbiAgICogYXV0b21hdGljYWxseS5cbiAgICovXG4gIGVuZFNjcm9sbCgpIHtcbiAgICBOYXRpdmVGcmFtZVJhdGVMb2dnZXIgJiYgTmF0aXZlRnJhbWVSYXRlTG9nZ2VyLmVuZFNjcm9sbCgpO1xuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGcmFtZVJhdGVMb2dnZXI7XG4iXSwibWFwcGluZ3MiOiI7O0FBVUE7O0FBRUEsSUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFrQkEsSUFBTUMsZUFBZSxHQUFHO0VBS3RCQyxnQkFBZ0IsRUFBRSwwQkFBU0MsT0FBVCxFQUlmO0lBQ0QsSUFBSUEsT0FBTyxDQUFDQyxLQUFSLEtBQWtCQyxTQUF0QixFQUFpQztNQUMvQk4sU0FBUyxDQUNQTyw4QkFETyxFQUVQLDREQUZPLENBQVQ7SUFJRDs7SUFDRCxJQUFJQSw4QkFBSixFQUEyQjtNQUV6QixJQUFNQyxZQUFZLEdBQUc7UUFDbkJILEtBQUssRUFBRSxDQUFDLENBQUNELE9BQU8sQ0FBQ0MsS0FERTtRQUVuQkksaUJBQWlCLEVBQUUsQ0FBQyxDQUFDTCxPQUFPLENBQUNLO01BRlYsQ0FBckI7O01BSUFGLDhCQUFBLENBQXNCSixnQkFBdEIsQ0FBdUNLLFlBQXZDO0lBQ0Q7RUFDRixDQXhCcUI7RUE4QnRCRSxVQUFVLEVBQUUsb0JBQVNDLE9BQVQsRUFBMEI7SUFDcENKLDhCQUFBLElBQXlCQSw4QkFBQSxDQUFzQkcsVUFBdEIsQ0FBaUNDLE9BQWpDLENBQXpCO0VBQ0QsQ0FoQ3FCO0VBc0N0QkMsV0F0Q3NCLHlCQXNDUjtJQUNaTCw4QkFBQSxJQUF5QkEsOEJBQUEsQ0FBc0JLLFdBQXRCLEVBQXpCO0VBQ0QsQ0F4Q3FCO0VBOEN0QkMsU0E5Q3NCLHVCQThDVjtJQUNWTiw4QkFBQSxJQUF5QkEsOEJBQUEsQ0FBc0JNLFNBQXRCLEVBQXpCO0VBQ0Q7QUFoRHFCLENBQXhCO0FBbURBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJiLGVBQWpCIn0=